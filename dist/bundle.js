/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={380:(t,e,n)=>{n.d(e,{Z:()=>o});var r=n(537),i=n.n(r),u=n(645),a=n.n(u)()(i());a.push([t.id,'@media(max-width: 600px){#player-two-container>.player-select{display:grid;grid-template-rows:5vh 20vh 10vh 5vh;grid-row-gap:5vh;margin-top:-10vh}#player-one-container>.player-select{display:grid;grid-template-rows:5vh 10vh 10vh 5vh;grid-row-gap:5vh}.player-select>img{width:180px}}html{height:100vh;width:100vw;overflow:hidden;font-size:10px}css-doodle{z-index:-100;position:fixed;top:0;left:0;height:100%;width:100%}#app-container{display:grid;grid-template-columns:100vw 100vw 100vw;grid-template-rows:100vh;gap:50vw;height:100vh;width:auto;justify-content:center;align-items:center;margin-left:200vw}#intro-screen{display:flex;position:absolute;width:100vw;flex-direction:column;align-items:center;justify-content:center;gap:15vh;left:0;right:0;margin-left:auto;margin-right:auto}.g-h1{font-size:.2rem;color:rgba(255,255,255,.85);font-family:"Exo 2",sans-serif}.g-btn_label{height:7vh;min-width:15vw;font-size:2.8rem;font-family:"Kanit",sans-serif;color:#fff;border-radius:2%;border-style:solid;border-color:#fff;border-width:1px;background-color:rgba(89,0,255,.363);text-align:center}.g-btn_label:hover{background-color:rgba(89,0,255,.5)}.g-btn_container label{padding-top:1.5vh}.g-btn_container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.g-btn_container input:checked~.g-btn_label{background-color:rgba(89,0,255,.9)}#player-select-form{display:grid;z-index:1;width:100%;grid-template-areas:"one submit two";grid-template-rows:100vh;grid-template-columns:repeat(3, 33.3%);justify-items:center;align-items:center}#player-one-container{display:grid;grid-area:one}#player-one-container .player-select .p1-x{grid-row:4;grid-column:1}#player-one-container .player-select .p1-o{grid-row:4;grid-column:2}#player-two-container{display:grid;grid-area:two}#start-game-container{display:grid;grid-area:submit;margin-top:75vh;height:7vh;width:10vw;justify-content:center}.player-select{display:grid;grid-template-rows:5vh 40vh 10vh 5vh;grid-template-columns:15vw 15vw;align-items:center;row-gap:3vh;column-gap:.8vw}.player-select>img{display:grid;grid-column:1/span 2;grid-row:2;max-width:380px;height:auto;opacity:90%;justify-self:left;align-self:flex-end;border:3px solid #000;border-radius:3px;margin-top:-8vh}#player-two-container img{justify-self:right}#player-one-name,#player-two-name{display:grid;grid-column:1/span 2;grid-row:3;height:7vh;font-size:2.8rem;width:25vw;background-color:rgba(65,153,6,.61);color:#fff;border:3px #adff2f solid;border-radius:3px}#player-two-name{justify-self:right}#difficulty-selector{width:20vw;height:7vh;margin-top:-8vh}#start-btn{justify-self:center}.selector-label{color:#fff;font-size:2rem;margin-top:-11vh;font-family:"Kanit",sans-serif;visibility:hidden;justify-self:center}#difficulty-selector{font-size:2rem;color:#fff;justify-self:center;background-color:rgba(65,153,6,.61);color:#fff;border:3px #adff2f solid;border-radius:3px;font-family:"Exo 2",sans-serif;visibility:hidden}.player-toggle label{padding-top:1vh}#time-mode-btn{margin-top:-80vh;width:30vw;height:7vh}#mode-selector{margin-top:-73vh;display:grid;grid-template-rows:repeat(5, 7vh);grid-template-columns:15vw 15vw;align-items:center}.time-toggle{grid-column:1/span 2}.time-label{width:30vw}.countdown-timer{z-index:10;position:fixed;margin-top:1000px;font-size:5rem;color:#fff;font-family:"Exo 2",sans-serif}#timer{z-index:10;position:fixed;margin-top:800px;font-size:5rem;color:#fff;font-family:"Exo 2",sans-serif;visibility:hidden}#game-container{display:flex;justify-content:center;z-index:0}#restart-btn{z-index:10;position:fixed;margin-top:1600px;visibility:hidden}#gameboard-container{height:100%;display:grid;grid-template-rows:repeat(3, 150px);grid-template-columns:repeat(3, 150px);margin-top:1000px;z-index:0;visibility:hidden;box-shadow:rgba(126,255,46,.85) 10px 0px}.board-space{height:150px;width:150px;border:solid rgba(0,0,0,.85) 3px;background:rgba(126,255,46,.85);font-size:5rem;display:flex;align-items:center;justify-content:center}.win-announce{display:flex;align-items:center;justify-content:center}',"",{version:3,sources:["webpack://./src/css/style.scss"],names:[],mappings:"AAkBE,yBAOE,qCACI,YAAA,CACA,oCAAA,CACA,gBAAA,CACA,gBAAA,CAGJ,qCACI,YAAA,CACA,oCAAA,CACA,gBAAA,CAMJ,mBAEI,WAAA,CAAA,CAQR,KACI,YAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CAGJ,WACI,YAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,UAAA,CAIJ,eACI,YAAA,CACA,uCAAA,CACA,wBAAA,CACA,QAAA,CACA,YAAA,CACA,UAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBAAA,CAGJ,cACI,YAAA,CACA,iBAAA,CACA,WAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,gBAAA,CACA,iBAAA,CAMJ,MACI,eAAA,CACA,2BAAA,CACA,8BAAA,CAGJ,aACI,UAAA,CACA,cAAA,CAEA,gBAAA,CACA,8BAAA,CACA,UAAA,CACA,gBAAA,CACA,kBAAA,CACA,iBAAA,CACA,gBAAA,CACA,oCAAA,CACA,iBAAA,CAIJ,mBACI,kCAAA,CAIJ,uBACI,iBAAA,CAEJ,uBACI,iBAAA,CACA,SAAA,CACA,cAAA,CACA,QAAA,CACA,OAAA,CAGJ,4CACI,kCAAA,CAKJ,oBACI,YAAA,CACA,SAAA,CACA,UAAA,CACA,oCAAA,CACA,wBAAA,CACA,sCAAA,CACA,oBAAA,CACA,kBAAA,CAKJ,sBACI,YAAA,CACA,aAAA,CAEI,2CACI,UAAA,CACA,aAAA,CAEJ,2CACI,UAAA,CACA,aAAA,CAOZ,sBACI,YAAA,CACA,aAAA,CAGJ,sBACI,YAAA,CACA,gBAAA,CACA,eAAA,CACA,UAAA,CACA,UAAA,CACA,sBAAA,CAKJ,eACI,YAAA,CACA,oCAAA,CACA,+BAAA,CACA,kBAAA,CACA,WAAA,CACA,eAAA,CAKJ,mBAEI,YAAA,CACA,oBAAA,CACA,UAAA,CACA,eAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CACA,mBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CAGJ,0BACI,kBAAA,CAKJ,kCAEI,YAAA,CACA,oBAAA,CACA,UAAA,CACA,UAAA,CACA,gBAAA,CACA,UAAA,CACA,mCAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CAOJ,iBACI,kBAAA,CAIJ,qBACI,UAAA,CACA,UAAA,CACA,eAAA,CAIJ,WACI,mBAAA,CAGJ,gBACI,UAAA,CACA,cAAA,CACA,gBAAA,CACA,8BAAA,CACA,iBAAA,CACA,mBAAA,CAIJ,qBACI,cAAA,CACA,UAAA,CACA,mBAAA,CACA,mCAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CACA,8BAAA,CACA,iBAAA,CAIJ,qBACI,eAAA,CAGJ,eACI,gBAAA,CACA,UAAA,CACA,UAAA,CAKJ,eACI,gBAAA,CACA,YAAA,CACA,iCAAA,CACA,+BAAA,CACA,kBAAA,CAIJ,aACI,oBAAA,CAGJ,YACI,UAAA,CAKJ,iBACI,UAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,8BAAA,CAGJ,OACI,UAAA,CACA,cAAA,CACA,gBAAA,CACA,cAAA,CACA,UAAA,CACA,8BAAA,CACA,iBAAA,CAGJ,gBACI,YAAA,CACA,sBAAA,CACA,SAAA,CAGJ,aACI,UAAA,CACA,cAAA,CACA,iBAAA,CACA,iBAAA,CAIJ,qBACI,WAAA,CACA,YAAA,CACA,mCAAA,CACA,sCAAA,CACA,iBAAA,CACA,SAAA,CACA,iBAAA,CACA,wCAAA,CAGJ,aACI,YAAA,CACA,WAAA,CACA,gCAAA,CACA,+BAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAGJ,cACI,YAAA,CACA,kBAAA,CACA,sBAAA",sourcesContent:['$xs: "480px";\n$sm: "600px";\n$md: "799px";\n$lg: "1010px";\n$xl: "1280px";\n\n$media-expressions: (screen: "screen",\n                     handheld: "handheld",\n                     retina2x:\n                     ("(-webkit-min-device-pixel-ratio: 2)",\n                     "(min-resolution: 192dpi)")) !default;\n\n@mixin media-min($size) {\n  @media (min-width: $size) {\n    @content;\n  }\n}\n@mixin media-max($size) {\n  @media (max-width: $size) {\n    @content;\n  }\n}\n\n@include media-max($sm) {\n    \n    #player-two-container > .player-select {\n        display: grid;\n        grid-template-rows: 5vh 20vh 10vh 5vh ;\n        grid-row-gap: 5vh;\n        margin-top: -10vh;\n    }\n\n    #player-one-container > .player-select {\n        display: grid;\n        grid-template-rows: 5vh 10vh 10vh 5vh ;\n        grid-row-gap: 5vh;\n        \n    \n    }\n\n\n    .player-select > img {\n    \n        width: 180px;\n        }\n    \n\n}\n\n\n\nhtml {\n    height: 100vh; \n    width: 100vw;\n    overflow: hidden; \n    font-size: 10px;  \n}\n\ncss-doodle {\n    z-index: -100;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n\n}\n\n#app-container {\n    display: grid;\n    grid-template-columns: 100vw 100vw 100vw;\n    grid-template-rows: 100vh;\n    gap: 50vw;\n    height: 100vh;\n    width: auto;\n    justify-content: center;\n    align-items: center;\n    margin-left: 200vw;\n}\n\n#intro-screen {\n    display: flex;\n    position: absolute;\n    width: 100vw;\n    flex-direction:column;\n    align-items: center;\n    justify-content: center;\n    gap: 15vh;\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n    \n\n}\n\n\n.g-h1 {\n    font-size: .2rem;\n    color: rgba(255, 255, 255, 0.85);\n    font-family: \'Exo 2\', sans-serif;\n}\n\n.g-btn_label {\n    height: 7vh;\n    min-width: 15vw;\n    // max-width: 14%;\n    font-size: 2.8rem;\n    font-family: \'Kanit\', sans-serif;\n    color: white;\n    border-radius: 2%;\n    border-style: solid;\n    border-color: white;\n    border-width: 1px;\n    background-color: rgba(89, 0, 255, 0.363);\n    text-align: center;\n\n}\n\n.g-btn_label:hover {\n    background-color: rgba(89, 0, 255, 0.5);\n\n}\n\n.g-btn_container label {\n    padding-top: 1.5vh;\n}\n.g-btn_container input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 0;\n}\n\n.g-btn_container input:checked ~ .g-btn_label {\n    background-color: rgba(89, 0, 255, 0.9);\n\n}\n\n\n#player-select-form {\n    display: grid;\n    z-index: 1;\n    width: 100%;\n    grid-template-areas: "one submit two";\n    grid-template-rows: 100vh;\n    grid-template-columns: repeat(3, 33.3%);\n    justify-items: center;\n    align-items: center;\n    \n    \n}\n\n#player-one-container {\n    display: grid;\n    grid-area: one;\n    .player-select {\n        .p1-x {\n            grid-row: 4;\n            grid-column: 1;\n        }\n        .p1-o {\n            grid-row: 4;\n            grid-column: 2;\n        }\n    }\n}\n\n\n\n#player-two-container {\n    display: grid;\n    grid-area: two;\n}\n\n#start-game-container {\n    display: grid;\n    grid-area: submit;\n    margin-top: 75vh;\n    height: 7vh;\n    width: 10vw;\n    justify-content: center;\n    \n}\n\n\n.player-select {\n    display: grid;\n    grid-template-rows: 5vh 40vh 10vh 5vh ;\n    grid-template-columns: 15vw 15vw;\n    align-items: center;\n    row-gap: 3vh;\n    column-gap: .8vw;\n}\n\n\n\n.player-select > img {\n    \n    display: grid;\n    grid-column: 1 / span 2;\n    grid-row: 2;\n    max-width: 380px;\n    height: auto;\n    opacity: 90%;\n    justify-self: left;\n    align-self: flex-end;\n    border: 3px solid black;\n    border-radius: 3px;\n    margin-top: -8vh;\n}\n\n#player-two-container img {\n    justify-self: right;\n}\n\n\n\n#player-one-name,\n#player-two-name {\n    display: grid;\n    grid-column: 1 / span 2;\n    grid-row: 3;\n    height: 7vh;\n    font-size: 2.8rem;\n    width: 25vw;\n    background-color:rgba(65, 153, 6, 0.61);\n    color: white;\n    border: 3px greenyellow solid;\n    border-radius: 3px;\n    \n    \n}\n\n\n\n#player-two-name {\n    justify-self: right;\n}\n\n\n#difficulty-selector {\n    width: 20vw;\n    height: 7vh;\n    margin-top: -8vh;\n\n}\n\n#start-btn {\n    justify-self: center;\n}\n\n.selector-label {\n    color: white;\n    font-size: 2rem;\n    margin-top: -11vh;\n    font-family: \'Kanit\', sans-serif;\n    visibility: hidden;\n    justify-self: center;\n}\n    \n\n#difficulty-selector {\n    font-size: 2rem;\n    color: white;\n    justify-self: center;\n    background-color:rgba(65, 153, 6, 0.61);\n    color: white;\n    border: 3px greenyellow solid;\n    border-radius: 3px;\n    font-family: \'Exo 2\', sans-serif;\n    visibility: hidden;\n\n}\n\n.player-toggle label {\n    padding-top: 1vh;\n}\n\n#time-mode-btn {\n    margin-top: -80vh;\n    width: 30vw;\n    height: 7vh;\n    \n    \n}\n\n#mode-selector {\n    margin-top: -73vh;\n    display: grid;\n    grid-template-rows: repeat(5, 7vh) ;\n    grid-template-columns: 15vw 15vw;\n    align-items: center;\n\n}\n\n.time-toggle {\n    grid-column: 1 / span 2;\n}\n\n.time-label {\n    width: 30vw;\n}\n\n\n\n.countdown-timer {\n    z-index: 10;\n    position: fixed;\n    margin-top: 1000px;\n    font-size: 5rem;\n    color: white;\n    font-family: \'Exo 2\', sans-serif;\n}\n\n#timer {\n    z-index: 10;\n    position: fixed;\n    margin-top: 800px;\n    font-size: 5rem;\n    color: white;\n    font-family: \'Exo 2\', sans-serif;\n    visibility: hidden;\n}\n\n#game-container {\n    display: flex;\n    justify-content: center;\n    z-index: 0;\n}\n\n#restart-btn {\n    z-index: 10;\n    position: fixed;\n    margin-top: 1600px;\n    visibility: hidden;\n    \n}\n\n#gameboard-container {        \n    height: 100%;\n    display: grid;\n    grid-template-rows: repeat(3, 150px);\n    grid-template-columns: repeat(3,150px);\n    margin-top: 1000px;\n    z-index: 0;\n    visibility: hidden;\n    box-shadow: hsla(97, 100%, 59%, .85) 10px 0px;\n}\n\n.board-space {\n    height: 150px;\n    width: 150px;\n    border: solid rgba(0, 0, 0, 0.85) 3px;\n    background: hsla(97, 100%, 59%, .85);\n    font-size: 5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.win-announce {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}'],sourceRoot:""}]);const o=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,u){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(a[s]=!0)}for(var l=0;l<t.length;l++){var D=[].concat(t[l]);r&&a[D[0]]||(void 0!==u&&(void 0===D[5]||(D[1]="@layer".concat(D[5].length>0?" ".concat(D[5]):""," {").concat(D[1],"}")),D[5]=u),n&&(D[2]?(D[1]="@media ".concat(D[2]," {").concat(D[1],"}"),D[2]=n):D[2]=n),i&&(D[4]?(D[1]="@supports (".concat(D[4],") {").concat(D[1],"}"),D[4]=i):D[4]="".concat(i)),e.push(D))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),u="/*# ".concat(i," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([u]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var u={},a=[],o=0;o<t.length;o++){var s=t[o],l=r.base?s[0]+r.base:s[0],D=u[l]||0,c="".concat(l," ").concat(D);u[l]=D+1;var h=n(c),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(d);else{var p=i(d,r);r.byIndex=o,e.splice(o,0,{identifier:c,updater:p,references:1})}a.push(c)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var u=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<u.length;a++){var o=n(u[a]);e[o].references--}for(var s=r(t,i),l=0;l<u.length;l++){var D=n(u[l]);0===e[D].references&&(e[D].updater(),e.splice(D,1))}u=s}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var u=n.sourceMap;u&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(u))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var u=e[r]={id:r,exports:{}};return t[r](u,u.exports,n),u.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(795),i=n.n(r),u=n(569),a=n.n(u),o=n(565),s=n.n(o),l=n(216),D=n.n(l),c=n(589),h=n.n(c),d=n(380),p={};function f(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function A(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}p.styleTagTransform=h(),p.setAttributes=s(),p.insert=a().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=D(),e()(d.Z,p),d.Z&&d.Z.locals&&d.Z.locals;var m,g,C,_,v,y,F,b,w,x,E,B,T,k,M,S,O,z,I,P,R,j,U,L,Y,q,J,N,W={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},$={duration:.5,overwrite:!1,delay:0},G=1e8,X=1e-8,V=2*Math.PI,K=V/4,H=0,Q=Math.sqrt,Z=Math.cos,tt=Math.sin,et=function(t){return"string"==typeof t},nt=function(t){return"function"==typeof t},rt=function(t){return"number"==typeof t},it=function(t){return void 0===t},ut=function(t){return"object"==typeof t},at=function(t){return!1!==t},ot=function(){return"undefined"!=typeof window},st=function(t){return nt(t)||et(t)},lt="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Dt=Array.isArray,ct=/(?:-?\.?\d|\.)+/gi,ht=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,dt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,pt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ft=/[+-]=-?[.\d]+/,At=/[^,'"\[\]\s]+/gi,mt=/[\d.+\-=]+(?:e[-+]\d*)*/i,gt={},Ct={},_t=function(t){return(Ct=$t(t,gt))&&On},vt=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},yt=function(t,e){return!e&&console.warn(t)},Ft=function(t,e){return t&&(gt[t]=e)&&Ct&&(Ct[t]=e)||gt},bt=function(){return 0},wt={},xt=[],Et={},Bt={},Tt={},kt=30,Mt=[],St="",Ot=function(t){var e,n,r=t[0];if(ut(r)||nt(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(n=Mt.length;n--&&!Mt[n].targetTest(r););e=Mt[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new rn(t[n],e)))||t.splice(n,1);return t},zt=function(t){return t._gsap||Ot(ye(t))[0]._gsap},It=function(t,e,n){return(n=t[e])&&nt(n)?t[e]():it(n)&&t.getAttribute&&t.getAttribute(e)||n},Pt=function(t,e){return(t=t.split(",")).forEach(e)||t},Rt=function(t){return Math.round(1e5*t)/1e5||0},jt=function(t){return Math.round(1e7*t)/1e7||0},Ut=function(t,e){for(var n=e.length,r=0;t.indexOf(e[r])<0&&++r<n;);return r<n},Lt=function(){var t,e,n=xt.length,r=xt.slice(0);for(Et={},xt.length=0,t=0;t<n;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Yt=function(t,e,n,r){xt.length&&Lt(),t.render(e,n,r),xt.length&&Lt()},qt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(At).length<2?e:et(t)?t.trim():t},Jt=function(t){return t},Nt=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},Wt=function(t,e){for(var n in e)n in t||"duration"===n||"ease"===n||(t[n]=e[n])},$t=function(t,e){for(var n in e)t[n]=e[n];return t},Gt=function t(e,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=ut(n[r])?t(e[r]||(e[r]={}),n[r]):n[r]);return e},Xt=function(t,e){var n,r={};for(n in t)n in e||(r[n]=t[n]);return r},Vt=function(t){var e=t.parent||g,n=t.keyframes?Wt:Nt;if(at(t.inherit))for(;e;)n(t,e.vars.defaults),e=e.parent||e._dp;return t},Kt=function(t,e,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=e._prev,u=e._next;i?i._next=u:t[n]===e&&(t[n]=u),u?u._prev=i:t[r]===e&&(t[r]=i),e._next=e._prev=e.parent=null},Ht=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Qt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},Zt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},te=function t(e){return!e||e._ts&&t(e.parent)},ee=function(t){return t._repeat?ne(t._tTime,t=t.duration()+t._rDelay)*t:0},ne=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},re=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},ie=function(t){return t._end=jt(t._start+(t._tDur/Math.abs(t._ts||t._rts||X)||0))},ue=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=jt(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),ie(t),n._dirty||Qt(n,t)),t},ae=function(t,e){var n;if((e._time||e._initted&&!e._dur)&&(n=re(t.rawTime(),e),(!e._dur||ge(0,e.totalDuration(),n)-e._tTime>X)&&e.render(n,!0)),Qt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},oe=function(t,e,n,r){return e.parent&&Ht(e),e._start=jt((rt(n)?n:n||t!==g?fe(t,n,e):t._time)+e._delay),e._end=jt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var u,a=t[r];if(i)for(u=e[i];a&&a[i]>u;)a=a._prev;a?(e._next=a._next,a._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[r]=e,e._prev=a,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),ce(e)||(t._recent=e),r||ae(t,e),t},se=function(t,e){return(gt.ScrollTrigger||vt("scrollTrigger",e))&&gt.ScrollTrigger.create(e,t)},le=function(t,e,n,r){return cn(t,e),t._initted?!n&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&F!==Ne.frame?(xt.push(t),t._lazy=[e,r],1):void 0:1},De=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},ce=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},he=function(t,e,n,r){var i=t._repeat,u=jt(e)||0,a=t._tTime/t._tDur;return a&&!r&&(t._time*=u/t._dur),t._dur=u,t._tDur=i?i<0?1e10:jt(u*(i+1)+t._rDelay*i):u,a&&!r?ue(t,t._tTime=t._tDur*a):t.parent&&ie(t),n||Qt(t.parent,t),t},de=function(t){return t instanceof an?Qt(t):he(t,t._dur)},pe={_start:0,endTime:bt,totalDuration:bt},fe=function t(e,n,r){var i,u,a,o=e.labels,s=e._recent||pe,l=e.duration()>=G?s.endTime(!1):e._dur;return et(n)&&(isNaN(n)||n in o)?(u=n.charAt(0),a="%"===n.substr(-1),i=n.indexOf("="),"<"===u||">"===u?(i>=0&&(n=n.replace(/=/,"")),("<"===u?s._start:s.endTime(s._repeat>=0))+(parseFloat(n.substr(1))||0)*(a?(i<0?s:r).totalDuration()/100:1)):i<0?(n in o||(o[n]=l),o[n]):(u=parseFloat(n.charAt(i-1)+n.substr(i+1)),a&&r&&(u=u/100*(Dt(r)?r[0]:r).totalDuration()),i>1?t(e,n.substr(0,i-1),r)+u:l+u)):null==n?l:+n},Ae=function(t,e,n){var r,i,u=rt(e[1]),a=(u?2:1)+(t<2?0:1),o=e[a];if(u&&(o.duration=e[1]),o.parent=n,t){for(r=o,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=at(i.vars.inherit)&&i.parent;o.immediateRender=at(r.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new fn(e[0],o,e[a+1])},me=function(t,e){return t||0===t?e(t):e},ge=function(t,e,n){return n<t?t:n>e?e:n},Ce=function(t){if("string"!=typeof t)return"";var e=mt.exec(t);return e?t.substr(e.index+e[0].length):""},_e=[].slice,ve=function(t,e){return t&&ut(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&ut(t[0]))&&!t.nodeType&&t!==C},ye=function(t,e,n){return!et(t)||n||!_&&We()?Dt(t)?function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var r;return et(t)&&!e||ve(t,1)?(r=n).push.apply(r,ye(t)):n.push(t)}))||n}(t,n):ve(t)?_e.call(t,0):t?[t]:[]:_e.call((e||v).querySelectorAll(t),0)},Fe=function(t){return t.sort((function(){return.5-Math.random()}))},be=function(t){if(nt(t))return t;var e=ut(t)?t:{each:t},n=Qe(e.ease),r=e.from||0,i=parseFloat(e.base)||0,u={},a=r>0&&r<1,o=isNaN(r)||a,s=e.axis,l=r,D=r;return et(r)?l=D={center:.5,edges:.5,end:1}[r]||0:!a&&o&&(l=r[0],D=r[1]),function(t,a,c){var h,d,p,f,A,m,g,C,_,v=(c||e).length,y=u[v];if(!y){if(!(_="auto"===e.grid?0:(e.grid||[1,G])[1])){for(g=-G;g<(g=c[_++].getBoundingClientRect().left)&&_<v;);_--}for(y=u[v]=[],h=o?Math.min(_,v)*l-.5:r%_,d=o?v*D/_-.5:r/_|0,g=0,C=G,m=0;m<v;m++)p=m%_-h,f=d-(m/_|0),y[m]=A=s?Math.abs("y"===s?f:p):Q(p*p+f*f),A>g&&(g=A),A<C&&(C=A);"random"===r&&Fe(y),y.max=g-C,y.min=C,y.v=v=(parseFloat(e.amount)||parseFloat(e.each)*(_>v?v-1:s?"y"===s?v/_:_:Math.max(_,v/_))||0)*("edges"===r?-1:1),y.b=v<0?i-v:i,y.u=Ce(e.amount||e.each)||0,n=n&&v<0?Ke(n):n}return v=(y[t]-y.min)/y.max||0,jt(y.b+(n?n(v):v)*y.v)+y.u}},we=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var r=Math.round(parseFloat(n)/t)*t*e;return(r-r%1)/e+(rt(n)?0:Ce(n))}},xe=function(t,e){var n,r,i=Dt(t);return!i&&ut(t)&&(n=i=t.radius||G,t.values?(t=ye(t.values),(r=!rt(t[0]))&&(n*=n)):t=we(t.increment)),me(e,i?nt(t)?function(e){return r=t(e),Math.abs(r-e)<=n?r:e}:function(e){for(var i,u,a=parseFloat(r?e.x:e),o=parseFloat(r?e.y:0),s=G,l=0,D=t.length;D--;)(i=r?(i=t[D].x-a)*i+(u=t[D].y-o)*u:Math.abs(t[D]-a))<s&&(s=i,l=D);return l=!n||s<=n?t[l]:e,r||l===e||rt(e)?l:l+Ce(e)}:we(t))},Ee=function(t,e,n,r){return me(Dt(t)?!e:!0===n?!!(n=0):!r,(function(){return Dt(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*r)/r}))},Be=function(t,e,n){return me(n,(function(n){return t[~~e(n)]}))},Te=function(t){for(var e,n,r,i,u=0,a="";~(e=t.indexOf("random(",u));)r=t.indexOf(")",e),i="["===t.charAt(e+7),n=t.substr(e+7,r-e-7).match(i?At:ct),a+=t.substr(u,e-u)+Ee(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),u=r+1;return a+t.substr(u,t.length-u)},ke=function(t,e,n,r,i){var u=e-t,a=r-n;return me(i,(function(e){return n+((e-t)/u*a||0)}))},Me=function(t,e,n){var r,i,u,a=t.labels,o=G;for(r in a)(i=a[r]-e)<0==!!n&&i&&o>(i=Math.abs(i))&&(u=r,o=i);return u},Se=function(t,e,n){var r,i,u=t.vars,a=u[e];if(a)return r=u[e+"Params"],i=u.callbackScope||t,n&&xt.length&&Lt(),r?a.apply(i,r):a.call(i)},Oe=function(t){return Ht(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&Se(t,"onInterrupt"),t},ze=function(t){var e=(t=!t.name&&t.default||t).name,n=nt(t),r=e&&!n&&t.init?function(){this._props=[]}:t,i={init:bt,render:bn,add:ln,kill:xn,modifier:wn,rawVars:0},u={targetTest:0,get:0,getSetter:_n,aliases:{},register:0};if(We(),t!==r){if(Bt[e])return;Nt(r,Nt(Xt(t,i),u)),$t(r.prototype,$t(i,Xt(t,u))),Bt[r.prop=e]=r,t.targetTest&&(Mt.push(r),wt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Ft(e,r),t.register&&t.register(On,r,Tn)},Ie=255,Pe={aqua:[0,Ie,Ie],lime:[0,Ie,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ie],navy:[0,0,128],white:[Ie,Ie,Ie],olive:[128,128,0],yellow:[Ie,Ie,0],orange:[Ie,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ie,0,0],pink:[Ie,192,203],cyan:[0,Ie,Ie],transparent:[Ie,Ie,Ie,0]},Re=function(t,e,n){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*Ie+.5|0},je=function(t,e,n){var r,i,u,a,o,s,l,D,c,h,d=t?rt(t)?[t>>16,t>>8&Ie,t&Ie]:0:Pe.black;if(!d){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Pe[t])d=Pe[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),i=t.charAt(2),u=t.charAt(3),t="#"+r+r+i+i+u+u+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(d=parseInt(t.substr(1,6),16))>>16,d>>8&Ie,d&Ie,parseInt(t.substr(7),16)/255];d=[(t=parseInt(t.substr(1),16))>>16,t>>8&Ie,t&Ie]}else if("hsl"===t.substr(0,3))if(d=h=t.match(ct),e){if(~t.indexOf("="))return d=t.match(ht),n&&d.length<4&&(d[3]=1),d}else a=+d[0]%360/360,o=+d[1]/100,r=2*(s=+d[2]/100)-(i=s<=.5?s*(o+1):s+o-s*o),d.length>3&&(d[3]*=1),d[0]=Re(a+1/3,r,i),d[1]=Re(a,r,i),d[2]=Re(a-1/3,r,i);else d=t.match(ct)||Pe.transparent;d=d.map(Number)}return e&&!h&&(r=d[0]/Ie,i=d[1]/Ie,u=d[2]/Ie,s=((l=Math.max(r,i,u))+(D=Math.min(r,i,u)))/2,l===D?a=o=0:(c=l-D,o=s>.5?c/(2-l-D):c/(l+D),a=l===r?(i-u)/c+(i<u?6:0):l===i?(u-r)/c+2:(r-i)/c+4,a*=60),d[0]=~~(a+.5),d[1]=~~(100*o+.5),d[2]=~~(100*s+.5)),n&&d.length<4&&(d[3]=1),d},Ue=function(t){var e=[],n=[],r=-1;return t.split(Ye).forEach((function(t){var i=t.match(dt)||[];e.push.apply(e,i),n.push(r+=i.length+1)})),e.c=n,e},Le=function(t,e,n){var r,i,u,a,o="",s=(t+o).match(Ye),l=e?"hsla(":"rgba(",D=0;if(!s)return t;if(s=s.map((function(t){return(t=je(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(u=Ue(t),(r=n.c).join(o)!==u.c.join(o)))for(a=(i=t.replace(Ye,"1").split(dt)).length-1;D<a;D++)o+=i[D]+(~r.indexOf(D)?s.shift()||l+"0,0,0,0)":(u.length?u:s.length?s:n).shift());if(!i)for(a=(i=t.split(Ye)).length-1;D<a;D++)o+=i[D]+s[D];return o+i[a]},Ye=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Pe)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),qe=/hsl[a]?\(/,Je=function(t){var e,n=t.join(" ");if(Ye.lastIndex=0,Ye.test(n))return e=qe.test(n),t[1]=Le(t[1],e),t[0]=Le(t[0],e,Ue(t[1])),!0},Ne=(S=Date.now,O=500,z=33,I=S(),P=I,j=R=1e3/240,L=function t(e){var n,r,i,u,a=S()-P,o=!0===e;if(a>O&&(I+=a-z),((n=(i=(P+=a)-I)-j)>0||o)&&(u=++T.frame,k=i-1e3*T.time,T.time=i/=1e3,j+=n+(n>=R?4:R-n),r=1),o||(x=E(t)),r)for(M=0;M<U.length;M++)U[M](i,k,u,e)},T={time:0,frame:0,tick:function(){L(!0)},deltaRatio:function(t){return k/(1e3/(t||60))},wake:function(){y&&(!_&&ot()&&(C=_=window,v=C.document||{},gt.gsap=On,(C.gsapVersions||(C.gsapVersions=[])).push(On.version),_t(Ct||C.GreenSockGlobals||!C.gsap&&C||{}),B=C.requestAnimationFrame),x&&T.sleep(),E=B||function(t){return setTimeout(t,j-1e3*T.time+1|0)},w=1,L(2))},sleep:function(){(B?C.cancelAnimationFrame:clearTimeout)(x),w=0,E=bt},lagSmoothing:function(t,e){O=t||1e8,z=Math.min(e,O,0)},fps:function(t){R=1e3/(t||240),j=1e3*T.time+R},add:function(t){U.indexOf(t)<0&&U.push(t),We()},remove:function(t){var e;~(e=U.indexOf(t))&&U.splice(e,1)&&M>=e&&M--},_listeners:U=[]}),We=function(){return!w&&Ne.wake()},$e={},Ge=/^[\d.\-M][\d.\-,\s]/,Xe=/["']/g,Ve=function(t){for(var e,n,r,i={},u=t.substr(1,t.length-3).split(":"),a=u[0],o=1,s=u.length;o<s;o++)n=u[o],e=o!==s-1?n.lastIndexOf(","):n.length,r=n.substr(0,e),i[a]=isNaN(r)?r.replace(Xe,"").trim():+r,a=n.substr(e+1).trim();return i},Ke=function(t){return function(e){return 1-t(1-e)}},He=function t(e,n){for(var r,i=e._first;i;)i instanceof an?t(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?t(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Qe=function(t,e){return t&&(nt(t)?t:$e[t]||function(t){var e,n,r,i,u=(t+"").split("("),a=$e[u[0]];return a&&u.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Ve(u[1])]:(e=t,n=e.indexOf("(")+1,r=e.indexOf(")"),i=e.indexOf("(",n),e.substring(n,~i&&i<r?e.indexOf(")",r+1):r)).split(",").map(qt)):$e._CE&&Ge.test(t)?$e._CE("",t):a}(t))||e},Ze=function(t,e,n,r){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,u={easeIn:e,easeOut:n,easeInOut:r};return Pt(t,(function(t){for(var e in $e[t]=gt[t]=u,$e[i=t.toLowerCase()]=n,u)$e[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=$e[t+"."+e]=u[e]})),u},tn=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},en=function t(e,n,r){var i=n>=1?n:1,u=(r||(e?.3:.45))/(n<1?n:1),a=u/V*(Math.asin(1/i)||0),o=function(t){return 1===t?1:i*Math.pow(2,-10*t)*tt((t-a)*u)+1},s="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:tn(o);return u=V/u,s.config=function(n,r){return t(e,n,r)},s},nn=function t(e,n){void 0===n&&(n=1.70158);var r=function(t){return t?--t*t*((n+1)*t+n)+1:0},i="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:tn(r);return i.config=function(n){return t(e,n)},i};Pt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;Ze(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),$e.Linear.easeNone=$e.none=$e.Linear.easeIn,Ze("Elastic",en("in"),en("out"),en()),Y=7.5625,J=1/(q=2.75),Ze("Bounce",(function(t){return 1-N(1-t)}),N=function(t){return t<J?Y*t*t:t<.7272727272727273?Y*Math.pow(t-1.5/q,2)+.75:t<.9090909090909092?Y*(t-=2.25/q)*t+.9375:Y*Math.pow(t-2.625/q,2)+.984375}),Ze("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Ze("Circ",(function(t){return-(Q(1-t*t)-1)})),Ze("Sine",(function(t){return 1===t?1:1-Z(t*K)})),Ze("Back",nn("in"),nn("out"),nn()),$e.SteppedEase=$e.steps=gt.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,r=t+(e?0:1),i=e?1:0;return function(t){return((r*ge(0,.99999999,t)|0)+i)*n}}},$.ease=$e["quad.out"],Pt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return St+=t+","+t+"Params,"}));var rn=function(t,e){this.id=H++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:It,this.set=e?e.getSetter:_n},un=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,he(this,+t.duration,1,1),this.data=t.data,w||Ne.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,he(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(We(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(ue(this,t),!n._dp||n.parent||ae(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&oe(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===X||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Yt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+ee(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+ee(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?ne(this._tTime,n)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?re(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,Zt(this.totalTime(ge(-this._delay,this._tDur,e),!0)),ie(this),this},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(We(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==X&&(this._tTime-=X)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&oe(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(at(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?re(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(e._ts||1),e=e._dp;return n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,de(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,de(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(fe(this,t),at(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,at(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-X))},e.eventCallback=function(t,e,n){var r=this.vars;return arguments.length>1?(e?(r[t]=e,n&&(r[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(n){var r=nt(t)?t:Jt,i=function(){var t=e.then;e.then=null,nt(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),n(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){Oe(this)},t}();Nt(un.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var an=function(t){function e(e,n){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=at(e.sortChildren),g&&oe(e.parent||g,f(r),n),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&se(f(r),e.scrollTrigger),r}A(e,t);var n=e.prototype;return n.to=function(t,e,n){return Ae(0,arguments,this),this},n.from=function(t,e,n){return Ae(1,arguments,this),this},n.fromTo=function(t,e,n,r){return Ae(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,Vt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new fn(t,e,fe(this,n),1),this},n.call=function(t,e,n){return oe(this,fn.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,r,i,u,a){return n.duration=e,n.stagger=n.stagger||r,n.onComplete=u,n.onCompleteParams=a,n.parent=this,new fn(t,n,fe(this,i)),this},n.staggerFrom=function(t,e,n,r,i,u,a){return n.runBackwards=1,Vt(n).immediateRender=at(n.immediateRender),this.staggerTo(t,e,n,r,i,u,a)},n.staggerFromTo=function(t,e,n,r,i,u,a,o){return r.startAt=n,Vt(r).immediateRender=at(r.immediateRender),this.staggerTo(t,e,r,i,u,a,o)},n.render=function(t,e,n){var r,i,u,a,o,s,l,D,c,h,d,p,f=this._time,A=this._dirty?this.totalDuration():this._tDur,m=this._dur,C=t<=0?0:jt(t),_=this._zTime<0!=t<0&&(this._initted||!m);if(this!==g&&C>A&&t>=0&&(C=A),C!==this._tTime||n||_){if(f!==this._time&&m&&(C+=this._time-f,t+=this._time-f),r=C,c=this._start,s=!(D=this._ts),_&&(m||(f=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(d=this._yoyo,o=m+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,n);if(r=jt(C%o),C===A?(a=this._repeat,r=m):((a=~~(C/o))&&a===C/o&&(r=m,a--),r>m&&(r=m)),h=ne(this._tTime,o),!f&&this._tTime&&h!==a&&(h=a),d&&1&a&&(r=m-r,p=1),a!==h&&!this._lock){var v=d&&1&h,y=v===(d&&1&a);if(a<h&&(v=!v),f=v?0:m,this._lock=1,this.render(f||(p?0:jt(a*o)),e,!m)._lock=0,this._tTime=C,!e&&this.parent&&Se(this,"onRepeat"),this.vars.repeatRefresh&&!p&&(this.invalidate()._lock=1),f&&f!==this._time||s!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(m=this._dur,A=this._tDur,y&&(this._lock=2,f=v?m:-1e-4,this.render(f,!0),this.vars.repeatRefresh&&!p&&this.invalidate()),this._lock=0,!this._ts&&!s)return this;He(this,p)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,n){var r;if(n>e)for(r=t._first;r&&r._start<=n;){if(!r._dur&&"isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=n;){if(!r._dur&&"isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,jt(f),jt(r)),l&&(C-=r-(r=l._start))),this._tTime=C,this._time=r,this._act=!D,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,f=0),!f&&r&&!e&&(Se(this,"onStart"),this._tTime!==C))return this;if(r>=f&&t>=0)for(i=this._first;i;){if(u=i._next,(i._act||r>=i._start)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!s){l=0,u&&(C+=this._zTime=-1e-8);break}}i=u}else{i=this._last;for(var F=t<0?t:r;i;){if(u=i._prev,(i._act||F<=i._end)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(F-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(F-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!s){l=0,u&&(C+=this._zTime=F?-1e-8:X);break}}i=u}}if(l&&!e&&(this.pause(),l.render(r>=f?0:-1e-8)._zTime=r>=f?1:-1,this._ts))return this._start=c,ie(this),this.render(t,e,n);this._onUpdate&&!e&&Se(this,"onUpdate",!0),(C===A&&A>=this.totalDuration()||!C&&f)&&(c!==this._start&&Math.abs(D)===Math.abs(this._ts)||this._lock||((t||!m)&&(C===A&&this._ts>0||!C&&this._ts<0)&&Ht(this,1),e||t<0&&!f||!C&&!f&&A||(Se(this,C===A&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(C<A&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(rt(e)||(e=fe(this,e,t)),!(t instanceof un)){if(Dt(t))return t.forEach((function(t){return n.add(t,e)})),this;if(et(t))return this.addLabel(t,e);if(!nt(t))return this;t=fn.delayedCall(0,t)}return this!==t?oe(this,t,e):this},n.getChildren=function(t,e,n,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=-G);for(var i=[],u=this._first;u;)u._start>=r&&(u instanceof fn?e&&i.push(u):(n&&i.push(u),t&&i.push.apply(i,u.getChildren(!0,e,n)))),u=u._next;return i},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return et(t)?this.removeLabel(t):nt(t)?this.killTweensOf(t):(Kt(this,t),t===this._recent&&(this._recent=this._last),Qt(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=jt(Ne.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=fe(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var r=fn.delayedCall(0,e||bt,n);return r.data="isPause",this._hasPause=1,oe(this,r,fe(this,t))},n.removePause=function(t){var e=this._first;for(t=fe(this,t);e;)e._start===t&&"isPause"===e.data&&Ht(e),e=e._next},n.killTweensOf=function(t,e,n){for(var r=this.getTweensOf(t,n),i=r.length;i--;)on!==r[i]&&r[i].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,r=[],i=ye(t),u=this._first,a=rt(e);u;)u instanceof fn?Ut(u._targets,i)&&(a?(!on||u._initted&&u._ts)&&u.globalTime(0)<=e&&u.globalTime(u.totalDuration())>e:!e||u.isActive())&&r.push(u):(n=u.getTweensOf(i,e)).length&&r.push.apply(r,n),u=u._next;return r},n.tweenTo=function(t,e){e=e||{};var n,r=this,i=fe(r,t),u=e,a=u.startAt,o=u.onStart,s=u.onStartParams,l=u.immediateRender,D=fn.to(r,Nt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(a&&"time"in a?a.time:r._time))/r.timeScale())||X,onStart:function(){if(r.pause(),!n){var t=e.duration||Math.abs((i-(a&&"time"in a?a.time:r._time))/r.timeScale());D._dur!==t&&he(D,t,0,1).render(D._time,!0,!0),n=1}o&&o.apply(D,s||[])}},e));return l?D.render(0):D},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,Nt({startAt:{time:fe(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),Me(this,fe(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),Me(this,fe(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+X)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var r,i=this._first,u=this.labels;i;)i._start>=n&&(i._start+=t,i._end+=t),i=i._next;if(e)for(r in u)u[r]>=n&&(u[r]+=t);return Qt(this)},n.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Qt(this)},n.totalDuration=function(t){var e,n,r,i=0,u=this,a=u._last,o=G;if(arguments.length)return u.timeScale((u._repeat<0?u.duration():u.totalDuration())/(u.reversed()?-t:t));if(u._dirty){for(r=u.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(n=a._start)>o&&u._sort&&a._ts&&!u._lock?(u._lock=1,oe(u,a,n-a._delay,1)._lock=0):o=n,n<0&&a._ts&&(i-=n,(!r&&!u._dp||r&&r.smoothChildTiming)&&(u._start+=n/u._ts,u._time-=n,u._tTime-=n),u.shiftChildren(-n,!1,-Infinity),o=0),a._end>i&&a._ts&&(i=a._end),a=e;he(u,u===g&&u._time>i?u._time:i,1,1),u._dirty=0}return u._tDur},e.updateRoot=function(t){if(g._ts&&(Yt(g,re(t,g)),F=Ne.frame),Ne.frame>=kt){kt+=W.autoSleep||120;var e=g._first;if((!e||!e._ts)&&W.autoSleep&&Ne._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Ne.sleep()}}},e}(un);Nt(an.prototype,{_lock:0,_hasPause:0,_forcing:0});var on,sn=function(t,e,n,r,i,u,a){var o,s,l,D,c,h,d,p,f=new Tn(this._pt,t,e,0,1,Fn,null,i),A=0,m=0;for(f.b=n,f.e=r,n+="",(d=~(r+="").indexOf("random("))&&(r=Te(r)),u&&(u(p=[n,r],t,e),n=p[0],r=p[1]),s=n.match(pt)||[];o=pt.exec(r);)D=o[0],c=r.substring(A,o.index),l?l=(l+1)%5:"rgba("===c.substr(-5)&&(l=1),D!==s[m++]&&(h=parseFloat(s[m-1])||0,f._pt={_next:f._pt,p:c||1===m?c:",",s:h,c:"="===D.charAt(1)?parseFloat(D.substr(2))*("-"===D.charAt(0)?-1:1):parseFloat(D)-h,m:l&&l<4?Math.round:0},A=pt.lastIndex);return f.c=A<r.length?r.substring(A,r.length):"",f.fp=a,(ft.test(r)||d)&&(f.e=0),this._pt=f,f},ln=function(t,e,n,r,i,u,a,o,s){nt(r)&&(r=r(i||0,t,u));var l,D=t[e],c="get"!==n?n:nt(D)?s?t[e.indexOf("set")||!nt(t["get"+e.substr(3)])?e:"get"+e.substr(3)](s):t[e]():D,h=nt(D)?s?gn:mn:An;if(et(r)&&(~r.indexOf("random(")&&(r=Te(r)),"="===r.charAt(1)&&((l=parseFloat(c)+parseFloat(r.substr(2))*("-"===r.charAt(0)?-1:1)+(Ce(c)||0))||0===l)&&(r=l)),c!==r)return isNaN(c*r)||""===r?(!D&&!(e in t)&&vt(e,r),sn.call(this,t,e,c,r,h,o||W.stringFilter,s)):(l=new Tn(this._pt,t,e,+c||0,r-(c||0),"boolean"==typeof D?yn:vn,0,h),s&&(l.fp=s),a&&l.modifier(a,this,t),this._pt=l)},Dn=function(t,e,n,r,i,u){var a,o,s,l;if(Bt[t]&&!1!==(a=new Bt[t]).init(i,a.rawVars?e[t]:function(t,e,n,r,i){if(nt(t)&&(t=hn(t,i,e,n,r)),!ut(t)||t.style&&t.nodeType||Dt(t)||lt(t))return et(t)?hn(t,i,e,n,r):t;var u,a={};for(u in t)a[u]=hn(t[u],i,e,n,r);return a}(e[t],r,i,u,n),n,r,u)&&(n._pt=o=new Tn(n._pt,i,t,0,1,a.render,a,0,a.priority),n!==b))for(s=n._ptLookup[n._targets.indexOf(i)],l=a._props.length;l--;)s[a._props[l]]=o;return a},cn=function t(e,n){var r,i,u,a,o,s,l,D,c,h,d,p,f,A=e.vars,C=A.ease,_=A.startAt,v=A.immediateRender,y=A.lazy,F=A.onUpdate,b=A.onUpdateParams,w=A.callbackScope,x=A.runBackwards,E=A.yoyoEase,B=A.keyframes,T=A.autoRevert,k=e._dur,M=e._startAt,S=e._targets,O=e.parent,z=O&&"nested"===O.data?O.parent._targets:S,I="auto"===e._overwrite&&!m,P=e.timeline;if(P&&(!B||!C)&&(C="none"),e._ease=Qe(C,$.ease),e._yEase=E?Ke(Qe(!0===E?C:E,$.ease)):0,E&&e._yoyo&&!e._repeat&&(E=e._yEase,e._yEase=e._ease,e._ease=E),e._from=!P&&!!A.runBackwards,!P){if(p=(D=S[0]?zt(S[0]).harness:0)&&A[D.prop],r=Xt(A,wt),M&&M.render(-1,!0).kill(),_)if(Ht(e._startAt=fn.set(S,Nt({data:"isStart",overwrite:!1,parent:O,immediateRender:!0,lazy:at(y),startAt:null,delay:0,onUpdate:F,onUpdateParams:b,callbackScope:w,stagger:0},_))),n<0&&!v&&!T&&e._startAt.render(-1,!0),v){if(n>0&&!T&&(e._startAt=0),k&&n<=0)return void(n&&(e._zTime=n))}else!1===T&&(e._startAt=0);else if(x&&k)if(M)!T&&(e._startAt=0);else if(n&&(v=!1),u=Nt({overwrite:!1,data:"isFromStart",lazy:v&&at(y),immediateRender:v,stagger:0,parent:O},r),p&&(u[D.prop]=p),Ht(e._startAt=fn.set(S,u)),n<0&&e._startAt.render(-1,!0),v){if(!n)return}else t(e._startAt,X);for(e._pt=0,y=k&&at(y)||y&&!k,i=0;i<S.length;i++){if(l=(o=S[i])._gsap||Ot(S)[i]._gsap,e._ptLookup[i]=h={},Et[l.id]&&xt.length&&Lt(),d=z===S?i:z.indexOf(o),D&&!1!==(c=new D).init(o,p||r,e,d,z)&&(e._pt=a=new Tn(e._pt,o,c.name,0,1,c.render,c,0,c.priority),c._props.forEach((function(t){h[t]=a})),c.priority&&(s=1)),!D||p)for(u in r)Bt[u]&&(c=Dn(u,r,e,d,o,z))?c.priority&&(s=1):h[u]=a=ln.call(e,o,u,"get",r[u],d,z,0,A.stringFilter);e._op&&e._op[i]&&e.kill(o,e._op[i]),I&&e._pt&&(on=e,g.killTweensOf(o,h,e.globalTime(n)),f=!e.parent,on=0),e._pt&&y&&(Et[l.id]=1)}s&&Bn(e),e._onInit&&e._onInit(e)}e._onUpdate=F,e._initted=(!e._op||e._pt)&&!f},hn=function(t,e,n,r,i){return nt(t)?t.call(e,n,r,i):et(t)&&~t.indexOf("random(")?Te(t):t},dn=St+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",pn=(dn+",id,stagger,delay,duration,paused,scrollTrigger").split(","),fn=function(t){function e(e,n,r,i){var u;"number"==typeof n&&(r.duration=n,n=r,r=null);var a,o,s,l,D,c,h,d,p=(u=t.call(this,i?n:Vt(n))||this).vars,A=p.duration,C=p.delay,_=p.immediateRender,v=p.stagger,y=p.overwrite,F=p.keyframes,b=p.defaults,w=p.scrollTrigger,x=p.yoyoEase,E=n.parent||g,B=(Dt(e)||lt(e)?rt(e[0]):"length"in n)?[e]:ye(e);if(u._targets=B.length?Ot(B):yt("GSAP target "+e+" not found. https://greensock.com",!W.nullTargetWarn)||[],u._ptLookup=[],u._overwrite=y,F||v||st(A)||st(C)){if(n=u.vars,(a=u.timeline=new an({data:"nested",defaults:b||{}})).kill(),a.parent=a._dp=f(u),a._start=0,F)Vt(Nt(a.vars.defaults,{ease:"none"})),v?B.forEach((function(t,e){return F.forEach((function(n,r){return a.to(t,n,r?">":e*v)}))})):F.forEach((function(t){return a.to(B,t,">")}));else{if(l=B.length,h=v?be(v):bt,ut(v))for(D in v)~dn.indexOf(D)&&(d||(d={}),d[D]=v[D]);for(o=0;o<l;o++){for(D in s={},n)pn.indexOf(D)<0&&(s[D]=n[D]);s.stagger=0,x&&(s.yoyoEase=x),d&&$t(s,d),c=B[o],s.duration=+hn(A,f(u),o,c,B),s.delay=(+hn(C,f(u),o,c,B)||0)-u._delay,!v&&1===l&&s.delay&&(u._delay=C=s.delay,u._start+=C,s.delay=0),a.to(c,s,h(o,c,B))}a.duration()?A=C=0:u.timeline=0}A||u.duration(A=a.duration())}else u.timeline=0;return!0!==y||m||(on=f(u),g.killTweensOf(B),on=0),oe(E,f(u),r),n.reversed&&u.reverse(),n.paused&&u.paused(!0),(_||!A&&!F&&u._start===jt(E._time)&&at(_)&&te(f(u))&&"nested"!==E.data)&&(u._tTime=-1e-8,u.render(Math.max(0,-C))),w&&se(f(u),w),u}A(e,t);var n=e.prototype;return n.render=function(t,e,n){var r,i,u,a,o,s,l,D,c,h=this._time,d=this._tDur,p=this._dur,f=t>d-X&&t>=0?d:t<X?0:t;if(p){if(f!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(r=f,D=this.timeline,this._repeat){if(a=p+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,n);if(r=jt(f%a),f===d?(u=this._repeat,r=p):((u=~~(f/a))&&u===f/a&&(r=p,u--),r>p&&(r=p)),(s=this._yoyo&&1&u)&&(c=this._yEase,r=p-r),o=ne(this._tTime,a),r===h&&!n&&this._initted)return this;u!==o&&(D&&this._yEase&&He(D,s),!this.vars.repeatRefresh||s||this._lock||(this._lock=n=1,this.render(jt(a*u),!0).invalidate()._lock=0))}if(!this._initted){if(le(this,t<0?t:r,n,e))return this._tTime=0,this;if(p!==this._dur)return this.render(t,e,n)}if(this._tTime=f,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=l=(c||this._ease)(r/p),this._from&&(this.ratio=l=1-l),r&&!h&&!e&&(Se(this,"onStart"),this._tTime!==f))return this;for(i=this._pt;i;)i.r(l,i.d),i=i._next;D&&D.render(t<0?t:!r&&s?-1e-8:D._dur*l,e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,n),Se(this,"onUpdate")),this._repeat&&u!==o&&this.vars.onRepeat&&!e&&this.parent&&Se(this,"onRepeat"),f!==this._tDur&&f||this._tTime!==f||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!p)&&(f===this._tDur&&this._ts>0||!f&&this._ts<0)&&Ht(this,1),e||t<0&&!h||!f&&!h||(Se(this,f===d?"onComplete":"onReverseComplete",!0),this._prom&&!(f<d&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,r){var i,u,a,o=t.ratio,s=e<0||!e&&(!t._start&&De(t)&&(t._initted||!ce(t))||(t._ts<0||t._dp._ts<0)&&!ce(t))?0:1,l=t._rDelay,D=0;if(l&&t._repeat&&(D=ge(0,t._tDur,e),u=ne(D,l),a=ne(t._tTime,l),t._yoyo&&1&u&&(s=1-s),u!==a&&(o=1-s,t.vars.repeatRefresh&&t._initted&&t.invalidate())),s!==o||r||t._zTime===X||!e&&t._zTime){if(!t._initted&&le(t,e,r,n))return;for(a=t._zTime,t._zTime=e||(n?X:0),n||(n=e&&!a),t.ratio=s,t._from&&(s=1-s),t._time=0,t._tTime=D,i=t._pt;i;)i.r(s,i.d),i=i._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!n&&Se(t,"onUpdate"),D&&t._repeat&&!n&&t.parent&&Se(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===s&&(s&&Ht(t,1),n||(Se(t,s?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Oe(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,on&&!0!==on.vars.overwrite)._first||Oe(this),this.parent&&n!==this.timeline.totalDuration()&&he(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,u,a,o,s,l,D=this._targets,c=t?ye(t):D,h=this._ptLookup,d=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,r=n===e.length;r&&n--&&t[n]===e[n];);return n<0}(D,c))return"all"===e&&(this._pt=0),Oe(this);for(r=this._op=this._op||[],"all"!==e&&(et(e)&&(o={},Pt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var n,r,i,u,a=t[0]?zt(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(r in n=$t({},e),o)if(r in n)for(i=(u=o[r].split(",")).length;i--;)n[u[i]]=n[r];return n}(D,e)),l=D.length;l--;)if(~c.indexOf(D[l]))for(o in i=h[l],"all"===e?(r[l]=e,a=i,u={}):(u=r[l]=r[l]||{},a=e),a)(s=i&&i[o])&&("kill"in s.d&&!0!==s.d.kill(o)||Kt(this,s,"_pt"),delete i[o]),"all"!==u&&(u[o]=1);return this._initted&&!this._pt&&d&&Oe(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return Ae(1,arguments)},e.delayedCall=function(t,n,r,i){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},e.fromTo=function(t,e,n){return Ae(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return g.killTweensOf(t,e,n)},e}(un);Nt(fn.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Pt("staggerTo,staggerFrom,staggerFromTo",(function(t){fn[t]=function(){var e=new an,n=_e.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var An=function(t,e,n){return t[e]=n},mn=function(t,e,n){return t[e](n)},gn=function(t,e,n,r){return t[e](r.fp,n)},Cn=function(t,e,n){return t.setAttribute(e,n)},_n=function(t,e){return nt(t[e])?mn:it(t[e])&&t.setAttribute?Cn:An},vn=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},yn=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},Fn=function(t,e){var n=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+r,n=n._next;r+=e.c}e.set(e.t,e.p,r,e)},bn=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},wn=function(t,e,n,r){for(var i,u=this._pt;u;)i=u._next,u.p===r&&u.modifier(t,e,n),u=i},xn=function(t){for(var e,n,r=this._pt;r;)n=r._next,r.p===t&&!r.op||r.op===t?Kt(this,r,"_pt"):r.dep||(e=1),r=n;return!e},En=function(t,e,n,r){r.mSet(t,e,r.m.call(r.tween,n,r.mt),r)},Bn=function(t){for(var e,n,r,i,u=t._pt;u;){for(e=u._next,n=r;n&&n.pr>u.pr;)n=n._next;(u._prev=n?n._prev:i)?u._prev._next=u:r=u,(u._next=n)?n._prev=u:i=u,u=e}t._pt=r},Tn=function(){function t(t,e,n,r,i,u,a,o,s){this.t=e,this.s=r,this.c=i,this.p=n,this.r=u||vn,this.d=a||this,this.set=o||An,this.pr=s||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=En,this.m=t,this.mt=n,this.tween=e},t}();Pt(St+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return wt[t]=1})),gt.TweenMax=gt.TweenLite=fn,gt.TimelineLite=gt.TimelineMax=an,g=new an({sortChildren:!1,defaults:$,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),W.stringFilter=Je;var kn={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return ze(t)}))},timeline:function(t){return new an(t)},getTweensOf:function(t,e){return g.getTweensOf(t,e)},getProperty:function(t,e,n,r){et(t)&&(t=ye(t)[0]);var i=zt(t||{}).get,u=n?Jt:qt;return"native"===n&&(n=""),t?e?u((Bt[e]&&Bt[e].get||i)(t,e,n,r)):function(e,n,r){return u((Bt[e]&&Bt[e].get||i)(t,e,n,r))}:t},quickSetter:function(t,e,n){if((t=ye(t)).length>1){var r=t.map((function(t){return On.quickSetter(t,e,n)})),i=r.length;return function(t){for(var e=i;e--;)r[e](t)}}t=t[0]||{};var u=Bt[e],a=zt(t),o=a.harness&&(a.harness.aliases||{})[e]||e,s=u?function(e){var r=new u;b._pt=0,r.init(t,n?e+n:e,b,0,[t]),r.render(1,r),b._pt&&bn(1,b)}:a.set(t,o);return u?s:function(e){return s(t,o,n?e+n:e,a,1)}},isTweening:function(t){return g.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Qe(t.ease,$.ease)),Gt($,t||{})},config:function(t){return Gt(W,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,r=t.plugins,i=t.defaults,u=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!Bt[t]&&!gt[t]&&yt(e+" effect requires "+t+" plugin.")})),Tt[e]=function(t,e,r){return n(ye(t),Nt(e||{},i),r)},u&&(an.prototype[e]=function(t,n,r){return this.add(Tt[e](t,ut(n)?n:(r=n)&&{},this),r)})},registerEase:function(t,e){$e[t]=Qe(e)},parseEase:function(t,e){return arguments.length?Qe(t,e):$e},getById:function(t){return g.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,r,i=new an(t);for(i.smoothChildTiming=at(t.smoothChildTiming),g.remove(i),i._dp=0,i._time=i._tTime=g._time,n=g._first;n;)r=n._next,!e&&!n._dur&&n instanceof fn&&n.vars.onComplete===n._targets[0]||oe(i,n,n._start-n._delay),n=r;return oe(g,i,0),i},utils:{wrap:function t(e,n,r){var i=n-e;return Dt(e)?Be(e,t(0,e.length),n):me(r,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,n,r){var i=n-e,u=2*i;return Dt(e)?Be(e,t(0,e.length-1),n):me(r,(function(t){return e+((t=(u+(t-e)%u)%u||0)>i?u-t:t)}))},distribute:be,random:Ee,snap:xe,normalize:function(t,e,n){return ke(t,e,0,1,n)},getUnit:Ce,clamp:function(t,e,n){return me(n,(function(n){return ge(t,e,n)}))},splitColor:je,toArray:ye,selector:function(t){return t=ye(t)[0]||yt("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return ye(e,n.querySelectorAll?n:n===t?yt("Invalid scope")||v.createElement("div"):t)}},mapRange:ke,pipe:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(n){return t(parseFloat(n))+(e||Ce(n))}},interpolate:function t(e,n,r,i){var u=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!u){var a,o,s,l,D,c=et(e),h={};if(!0===r&&(i=1)&&(r=null),c)e={p:e},n={p:n};else if(Dt(e)&&!Dt(n)){for(s=[],l=e.length,D=l-2,o=1;o<l;o++)s.push(t(e[o-1],e[o]));l--,u=function(t){t*=l;var e=Math.min(D,~~t);return s[e](t-e)},r=n}else i||(e=$t(Dt(e)?[]:{},e));if(!s){for(a in n)ln.call(h,e,a,"get",n[a]);u=function(t){return bn(t,h)||(c?e.p:e)}}}return me(r,u)},shuffle:Fe},install:_t,effects:Tt,ticker:Ne,updateRoot:an.updateRoot,plugins:Bt,globalTimeline:g,core:{PropTween:Tn,globals:Ft,Tween:fn,Timeline:an,Animation:un,getCache:zt,_removeLinkedListItem:Kt,suppressOverwrites:function(t){return m=t}}};Pt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return kn[t]=fn[t]})),Ne.add(an.updateRoot),b=kn.to({},{duration:0});var Mn=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},Sn=function(t,e){return{name:t,rawVars:1,init:function(t,n,r){r._onInit=function(t){var r,i;if(et(n)&&(r={},Pt(n,(function(t){return r[t]=1})),n=r),e){for(i in r={},n)r[i]=e(n[i]);n=r}!function(t,e){var n,r,i,u=t._targets;for(n in e)for(r=u.length;r--;)(i=t._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Mn(i,n)),i&&i.modifier&&i.modifier(e[n],t,u[r],n))}(t,n)}}}},On=kn.registerPlugin({name:"attr",init:function(t,e,n,r,i){var u,a;for(u in e)(a=this.add(t,"setAttribute",(t.getAttribute(u)||0)+"",e[u],r,i,0,0,u))&&(a.op=u),this._props.push(u)}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n])}},Sn("roundProps",we),Sn("modifiers"),Sn("snap",xe))||kn;fn.version=an.version=On.version="3.8.0",y=1,ot()&&We(),$e.Power0,$e.Power1,$e.Power2,$e.Power3,$e.Power4,$e.Linear,$e.Quad,$e.Cubic,$e.Quart,$e.Quint,$e.Strong,$e.Elastic,$e.Back,$e.SteppedEase,$e.Bounce,$e.Sine,$e.Expo,$e.Circ;var zn,In,Pn,Rn,jn,Un,Ln,Yn={},qn=180/Math.PI,Jn=Math.PI/180,Nn=Math.atan2,Wn=/([A-Z])/g,$n=/(?:left|right|width|margin|padding|x)/i,Gn=/[\s,\(]\S/,Xn={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Vn=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Kn=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Hn=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Qn=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},Zn=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},tr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},er=function(t,e,n){return t.style[e]=n},nr=function(t,e,n){return t.style.setProperty(e,n)},rr=function(t,e,n){return t._gsap[e]=n},ir=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},ur=function(t,e,n,r,i){var u=t._gsap;u.scaleX=u.scaleY=n,u.renderTransform(i,u)},ar=function(t,e,n,r,i){var u=t._gsap;u[e]=n,u.renderTransform(i,u)},or="transform",sr=or+"Origin",lr=function(t,e){var n=In.createElementNS?In.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):In.createElement(t);return n.style?n:In.createElement(t)},Dr=function t(e,n,r){var i=getComputedStyle(e);return i[n]||i.getPropertyValue(n.replace(Wn,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&t(e,hr(n)||n,1)||""},cr="O,Moz,ms,Ms,Webkit".split(","),hr=function(t,e,n){var r=(e||jn).style,i=5;if(t in r&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(cr[i]+t in r););return i<0?null:(3===i?"ms":i>=0?cr[i]:"")+t},dr=function(){"undefined"!=typeof window&&window.document&&(zn=window,In=zn.document,Pn=In.documentElement,jn=lr("div")||{style:{}},lr("div"),or=hr(or),sr=or+"Origin",jn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ln=!!hr("perspective"),Rn=1)},pr=function t(e){var n,r=lr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,u=this.nextSibling,a=this.style.cssText;if(Pn.appendChild(r),r.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(u?i.insertBefore(this,u):i.appendChild(this)),Pn.removeChild(r),this.style.cssText=a,n},fr=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},Ar=function(t){var e;try{e=t.getBBox()}catch(n){e=pr.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===pr||(e=pr.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+fr(t,["x","cx","x1"])||0,y:+fr(t,["y","cy","y1"])||0,width:0,height:0}},mr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Ar(t))},gr=function(t,e){if(e){var n=t.style;e in Yn&&e!==sr&&(e=or),n.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty(e.replace(Wn,"-$1").toLowerCase())):n.removeAttribute(e)}},Cr=function(t,e,n,r,i,u){var a=new Tn(t._pt,e,n,0,1,u?tr:Zn);return t._pt=a,a.b=r,a.e=i,t._props.push(n),a},_r={deg:1,rad:1,turn:1},vr=function t(e,n,r,i){var u,a,o,s,l=parseFloat(r)||0,D=(r+"").trim().substr((l+"").length)||"px",c=jn.style,h=$n.test(n),d="svg"===e.tagName.toLowerCase(),p=(d?"client":"offset")+(h?"Width":"Height"),f=100,A="px"===i,m="%"===i;return i===D||!l||_r[i]||_r[D]?l:("px"!==D&&!A&&(l=t(e,n,r,"px")),s=e.getCTM&&mr(e),!m&&"%"!==D||!Yn[n]&&!~n.indexOf("adius")?(c[h?"width":"height"]=f+(A?D:i),a=~n.indexOf("adius")||"em"===i&&e.appendChild&&!d?e:e.parentNode,s&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==In&&a.appendChild||(a=In.body),(o=a._gsap)&&m&&o.width&&h&&o.time===Ne.time?Rt(l/o.width*f):((m||"%"===D)&&(c.position=Dr(e,"position")),a===e&&(c.position="static"),a.appendChild(jn),u=jn[p],a.removeChild(jn),c.position="absolute",h&&m&&((o=zt(a)).time=Ne.time,o.width=a[p]),Rt(A?u*l/f:u&&l?f/u*l:0))):(u=s?e.getBBox()[h?"width":"height"]:e[p],Rt(m?l/u*f:l/100*u)))},yr=function(t,e,n,r){var i;return Rn||dr(),e in Xn&&"transform"!==e&&~(e=Xn[e]).indexOf(",")&&(e=e.split(",")[0]),Yn[e]&&"transform"!==e?(i=Or(t,r),i="transformOrigin"!==e?i[e]:i.svg?i.origin:zr(Dr(t,sr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=xr[e]&&xr[e](t,e,n)||Dr(t,e)||It(t,e)||("opacity"===e?1:0)),n&&!~(i+"").trim().indexOf(" ")?vr(t,e,i,n)+n:i},Fr=function(t,e,n,r){if(!n||"none"===n){var i=hr(e,t,1),u=i&&Dr(t,i,1);u&&u!==n?(e=i,n=u):"borderColor"===e&&(n=Dr(t,"borderTopColor"))}var a,o,s,l,D,c,h,d,p,f,A,m,g=new Tn(this._pt,t.style,e,0,1,Fn),C=0,_=0;if(g.b=n,g.e=r,n+="","auto"==(r+="")&&(t.style[e]=r,r=Dr(t,e)||r,t.style[e]=n),Je(a=[n,r]),r=a[1],s=(n=a[0]).match(dt)||[],(r.match(dt)||[]).length){for(;o=dt.exec(r);)h=o[0],p=r.substring(C,o.index),D?D=(D+1)%5:"rgba("!==p.substr(-5)&&"hsla("!==p.substr(-5)||(D=1),h!==(c=s[_++]||"")&&(l=parseFloat(c)||0,A=c.substr((l+"").length),(m="="===h.charAt(1)?+(h.charAt(0)+"1"):0)&&(h=h.substr(2)),d=parseFloat(h),f=h.substr((d+"").length),C=dt.lastIndex-f.length,f||(f=f||W.units[e]||A,C===r.length&&(r+=f,g.e+=f)),A!==f&&(l=vr(t,e,c,f)||0),g._pt={_next:g._pt,p:p||1===_?p:",",s:l,c:m?m*d:d-l,m:D&&D<4||"zIndex"===e?Math.round:0});g.c=C<r.length?r.substring(C,r.length):""}else g.r="display"===e&&"none"===r?tr:Zn;return ft.test(r)&&(g.e=0),this._pt=g,g},br={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},wr=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,r,i,u=e.t,a=u.style,o=e.u,s=u._gsap;if("all"===o||!0===o)a.cssText="",r=1;else for(i=(o=o.split(",")).length;--i>-1;)n=o[i],Yn[n]&&(r=1,n="transformOrigin"===n?sr:or),gr(u,n);r&&(gr(u,or),s&&(s.svg&&u.removeAttribute("transform"),Or(u,1),s.uncache=1))}},xr={clearProps:function(t,e,n,r,i){if("isFromStart"!==i.data){var u=t._pt=new Tn(t._pt,e,n,0,0,wr);return u.u=r,u.pr=-10,u.tween=i,t._props.push(n),1}}},Er=[1,0,0,1,0,0],Br={},Tr=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},kr=function(t){var e=Dr(t,or);return Tr(e)?Er:e.substr(7).match(ht).map(Rt)},Mr=function(t,e){var n,r,i,u,a=t._gsap||zt(t),o=t.style,s=kr(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(s=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?Er:s:(s!==Er||t.offsetParent||t===Pn||a.svg||(i=o.display,o.display="block",(n=t.parentNode)&&t.offsetParent||(u=1,r=t.nextSibling,Pn.appendChild(t)),s=kr(t),i?o.display=i:gr(t,"display"),u&&(r?n.insertBefore(t,r):n?n.appendChild(t):Pn.removeChild(t))),e&&s.length>6?[s[0],s[1],s[4],s[5],s[12],s[13]]:s)},Sr=function(t,e,n,r,i,u){var a,o,s,l=t._gsap,D=i||Mr(t,!0),c=l.xOrigin||0,h=l.yOrigin||0,d=l.xOffset||0,p=l.yOffset||0,f=D[0],A=D[1],m=D[2],g=D[3],C=D[4],_=D[5],v=e.split(" "),y=parseFloat(v[0])||0,F=parseFloat(v[1])||0;n?D!==Er&&(o=f*g-A*m)&&(s=y*(-A/o)+F*(f/o)-(f*_-A*C)/o,y=y*(g/o)+F*(-m/o)+(m*_-g*C)/o,F=s):(y=(a=Ar(t)).x+(~v[0].indexOf("%")?y/100*a.width:y),F=a.y+(~(v[1]||v[0]).indexOf("%")?F/100*a.height:F)),r||!1!==r&&l.smooth?(C=y-c,_=F-h,l.xOffset=d+(C*f+_*m)-C,l.yOffset=p+(C*A+_*g)-_):l.xOffset=l.yOffset=0,l.xOrigin=y,l.yOrigin=F,l.smooth=!!r,l.origin=e,l.originIsAbsolute=!!n,t.style[sr]="0px 0px",u&&(Cr(u,l,"xOrigin",c,y),Cr(u,l,"yOrigin",h,F),Cr(u,l,"xOffset",d,l.xOffset),Cr(u,l,"yOffset",p,l.yOffset)),t.setAttribute("data-svg-origin",y+" "+F)},Or=function(t,e){var n=t._gsap||new rn(t);if("x"in n&&!e&&!n.uncache)return n;var r,i,u,a,o,s,l,D,c,h,d,p,f,A,m,g,C,_,v,y,F,b,w,x,E,B,T,k,M,S,O,z,I=t.style,P=n.scaleX<0,R="px",j="deg",U=Dr(t,sr)||"0";return r=i=u=s=l=D=c=h=d=0,a=o=1,n.svg=!(!t.getCTM||!mr(t)),A=Mr(t,n.svg),n.svg&&(x=(!n.uncache||"0px 0px"===U)&&!e&&t.getAttribute("data-svg-origin"),Sr(t,x||U,!!x||n.originIsAbsolute,!1!==n.smooth,A)),p=n.xOrigin||0,f=n.yOrigin||0,A!==Er&&(_=A[0],v=A[1],y=A[2],F=A[3],r=b=A[4],i=w=A[5],6===A.length?(a=Math.sqrt(_*_+v*v),o=Math.sqrt(F*F+y*y),s=_||v?Nn(v,_)*qn:0,(c=y||F?Nn(y,F)*qn+s:0)&&(o*=Math.abs(Math.cos(c*Jn))),n.svg&&(r-=p-(p*_+f*y),i-=f-(p*v+f*F))):(z=A[6],S=A[7],T=A[8],k=A[9],M=A[10],O=A[11],r=A[12],i=A[13],u=A[14],l=(m=Nn(z,M))*qn,m&&(x=b*(g=Math.cos(-m))+T*(C=Math.sin(-m)),E=w*g+k*C,B=z*g+M*C,T=b*-C+T*g,k=w*-C+k*g,M=z*-C+M*g,O=S*-C+O*g,b=x,w=E,z=B),D=(m=Nn(-y,M))*qn,m&&(g=Math.cos(-m),O=F*(C=Math.sin(-m))+O*g,_=x=_*g-T*C,v=E=v*g-k*C,y=B=y*g-M*C),s=(m=Nn(v,_))*qn,m&&(x=_*(g=Math.cos(m))+v*(C=Math.sin(m)),E=b*g+w*C,v=v*g-_*C,w=w*g-b*C,_=x,b=E),l&&Math.abs(l)+Math.abs(s)>359.9&&(l=s=0,D=180-D),a=Rt(Math.sqrt(_*_+v*v+y*y)),o=Rt(Math.sqrt(w*w+z*z)),m=Nn(b,w),c=Math.abs(m)>2e-4?m*qn:0,d=O?1/(O<0?-O:O):0),n.svg&&(x=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!Tr(Dr(t,or)),x&&t.setAttribute("transform",x))),Math.abs(c)>90&&Math.abs(c)<270&&(P?(a*=-1,c+=s<=0?180:-180,s+=s<=0?180:-180):(o*=-1,c+=c<=0?180:-180)),n.x=r-((n.xPercent=r&&(n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+R,n.y=i-((n.yPercent=i&&(n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+R,n.z=u+R,n.scaleX=Rt(a),n.scaleY=Rt(o),n.rotation=Rt(s)+j,n.rotationX=Rt(l)+j,n.rotationY=Rt(D)+j,n.skewX=c+j,n.skewY=h+j,n.transformPerspective=d+R,(n.zOrigin=parseFloat(U.split(" ")[2])||0)&&(I[sr]=zr(U)),n.xOffset=n.yOffset=0,n.force3D=W.force3D,n.renderTransform=n.svg?Yr:Ln?Lr:Pr,n.uncache=0,n},zr=function(t){return(t=t.split(" "))[0]+" "+t[1]},Ir=function(t,e,n){var r=Ce(e);return Rt(parseFloat(e)+parseFloat(vr(t,"x",n+"px",r)))+r},Pr=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Lr(t,e)},Rr="0deg",jr="0px",Ur=") ",Lr=function(t,e){var n=e||this,r=n.xPercent,i=n.yPercent,u=n.x,a=n.y,o=n.z,s=n.rotation,l=n.rotationY,D=n.rotationX,c=n.skewX,h=n.skewY,d=n.scaleX,p=n.scaleY,f=n.transformPerspective,A=n.force3D,m=n.target,g=n.zOrigin,C="",_="auto"===A&&t&&1!==t||!0===A;if(g&&(D!==Rr||l!==Rr)){var v,y=parseFloat(l)*Jn,F=Math.sin(y),b=Math.cos(y);y=parseFloat(D)*Jn,v=Math.cos(y),u=Ir(m,u,F*v*-g),a=Ir(m,a,-Math.sin(y)*-g),o=Ir(m,o,b*v*-g+g)}f!==jr&&(C+="perspective("+f+Ur),(r||i)&&(C+="translate("+r+"%, "+i+"%) "),(_||u!==jr||a!==jr||o!==jr)&&(C+=o!==jr||_?"translate3d("+u+", "+a+", "+o+") ":"translate("+u+", "+a+Ur),s!==Rr&&(C+="rotate("+s+Ur),l!==Rr&&(C+="rotateY("+l+Ur),D!==Rr&&(C+="rotateX("+D+Ur),c===Rr&&h===Rr||(C+="skew("+c+", "+h+Ur),1===d&&1===p||(C+="scale("+d+", "+p+Ur),m.style[or]=C||"translate(0, 0)"},Yr=function(t,e){var n,r,i,u,a,o=e||this,s=o.xPercent,l=o.yPercent,D=o.x,c=o.y,h=o.rotation,d=o.skewX,p=o.skewY,f=o.scaleX,A=o.scaleY,m=o.target,g=o.xOrigin,C=o.yOrigin,_=o.xOffset,v=o.yOffset,y=o.forceCSS,F=parseFloat(D),b=parseFloat(c);h=parseFloat(h),d=parseFloat(d),(p=parseFloat(p))&&(d+=p=parseFloat(p),h+=p),h||d?(h*=Jn,d*=Jn,n=Math.cos(h)*f,r=Math.sin(h)*f,i=Math.sin(h-d)*-A,u=Math.cos(h-d)*A,d&&(p*=Jn,a=Math.tan(d-p),i*=a=Math.sqrt(1+a*a),u*=a,p&&(a=Math.tan(p),n*=a=Math.sqrt(1+a*a),r*=a)),n=Rt(n),r=Rt(r),i=Rt(i),u=Rt(u)):(n=f,u=A,r=i=0),(F&&!~(D+"").indexOf("px")||b&&!~(c+"").indexOf("px"))&&(F=vr(m,"x",D,"px"),b=vr(m,"y",c,"px")),(g||C||_||v)&&(F=Rt(F+g-(g*n+C*i)+_),b=Rt(b+C-(g*r+C*u)+v)),(s||l)&&(a=m.getBBox(),F=Rt(F+s/100*a.width),b=Rt(b+l/100*a.height)),a="matrix("+n+","+r+","+i+","+u+","+F+","+b+")",m.setAttribute("transform",a),y&&(m.style[or]=a)},qr=function(t,e,n,r,i,u){var a,o,s=360,l=et(i),D=parseFloat(i)*(l&&~i.indexOf("rad")?qn:1),c=u?D*u:D-r,h=r+c+"deg";return l&&("short"===(a=i.split("_")[1])&&(c%=s)!=c%180&&(c+=c<0?s:-360),"cw"===a&&c<0?c=(c+36e9)%s-~~(c/s)*s:"ccw"===a&&c>0&&(c=(c-36e9)%s-~~(c/s)*s)),t._pt=o=new Tn(t._pt,e,n,r,c,Kn),o.e=h,o.u="deg",t._props.push(n),o},Jr=function(t,e){for(var n in e)t[n]=e[n];return t},Nr=function(t,e,n){var r,i,u,a,o,s,l,D=Jr({},n._gsap),c=n.style;for(i in D.svg?(u=n.getAttribute("transform"),n.setAttribute("transform",""),c[or]=e,r=Or(n,1),gr(n,or),n.setAttribute("transform",u)):(u=getComputedStyle(n)[or],c[or]=e,r=Or(n,1),c[or]=u),Yn)(u=D[i])!==(a=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=Ce(u)!==(l=Ce(a))?vr(n,i,u,l):parseFloat(u),s=parseFloat(a),t._pt=new Tn(t._pt,r,i,o,s-o,Vn),t._pt.u=l||0,t._props.push(i));Jr(r,D)};Pt("padding,margin,Width,Radius",(function(t,e){var n="Top",r="Right",i="Bottom",u="Left",a=(e<3?[n,r,i,u]:[n+u,n+r,i+r,i+u]).map((function(n){return e<2?t+n:"border"+n+t}));xr[e>1?"border"+t:t]=function(t,e,n,r,i){var u,o;if(arguments.length<4)return u=a.map((function(e){return yr(t,e,n)})),5===(o=u.join(" ")).split(u[0]).length?u[0]:o;u=(r+"").split(" "),o={},a.forEach((function(t,e){return o[t]=u[e]=u[e]||u[(e-1)/2|0]})),t.init(e,o,i)}}));var Wr,$r,Gr={name:"css",register:dr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,r,i){var u,a,o,s,l,D,c,h,d,p,f,A,m,g,C,_,v,y,F,b=this._props,w=t.style,x=n.vars.startAt;for(c in Rn||dr(),e)if("autoRound"!==c&&(a=e[c],!Bt[c]||!Dn(c,e,n,r,t,i)))if(l=typeof a,D=xr[c],"function"===l&&(l=typeof(a=a.call(n,r,t,i))),"string"===l&&~a.indexOf("random(")&&(a=Te(a)),D)D(this,t,c,a,n)&&(C=1);else if("--"===c.substr(0,2))u=(getComputedStyle(t).getPropertyValue(c)+"").trim(),a+="",Ye.lastIndex=0,Ye.test(u)||(h=Ce(u),d=Ce(a)),d?h!==d&&(u=vr(t,c,u,d)+d):h&&(a+=h),this.add(w,"setProperty",u,a,r,i,0,0,c),b.push(c);else if("undefined"!==l){if(x&&c in x?(u="function"==typeof x[c]?x[c].call(n,r,t,i):x[c],c in W.units&&!Ce(u)&&(u+=W.units[c]),et(u)&&~u.indexOf("random(")&&(u=Te(u)),"="===(u+"").charAt(1)&&(u=yr(t,c))):u=yr(t,c),s=parseFloat(u),(p="string"===l&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),o=parseFloat(a),c in Xn&&("autoAlpha"===c&&(1===s&&"hidden"===yr(t,"visibility")&&o&&(s=0),Cr(this,w,"visibility",s?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==c&&"transform"!==c&&~(c=Xn[c]).indexOf(",")&&(c=c.split(",")[0])),f=c in Yn)if(A||((m=t._gsap).renderTransform&&!e.parseTransform||Or(t,e.parseTransform),g=!1!==e.smoothOrigin&&m.smooth,(A=this._pt=new Tn(this._pt,w,or,0,1,m.renderTransform,m,0,-1)).dep=1),"scale"===c)this._pt=new Tn(this._pt,m,"scaleY",m.scaleY,(p?p*o:o-m.scaleY)||0),b.push("scaleY",c),c+="X";else{if("transformOrigin"===c){v=void 0,y=void 0,F=void 0,y=(v=(_=a).split(" "))[0],F=v[1]||"50%","top"!==y&&"bottom"!==y&&"left"!==F&&"right"!==F||(_=y,y=F,F=_),v[0]=br[y]||y,v[1]=br[F]||F,a=v.join(" "),m.svg?Sr(t,a,0,g,0,this):((d=parseFloat(a.split(" ")[2])||0)!==m.zOrigin&&Cr(this,m,"zOrigin",m.zOrigin,d),Cr(this,w,c,zr(u),zr(a)));continue}if("svgOrigin"===c){Sr(t,a,1,g,0,this);continue}if(c in Br){qr(this,m,c,s,a,p);continue}if("smoothOrigin"===c){Cr(this,m,"smooth",m.smooth,a);continue}if("force3D"===c){m[c]=a;continue}if("transform"===c){Nr(this,a,t);continue}}else c in w||(c=hr(c)||c);if(f||(o||0===o)&&(s||0===s)&&!Gn.test(a)&&c in w)o||(o=0),(h=(u+"").substr((s+"").length))!==(d=Ce(a)||(c in W.units?W.units[c]:h))&&(s=vr(t,c,u,d)),this._pt=new Tn(this._pt,f?m:w,c,s,p?p*o:o-s,f||"px"!==d&&"zIndex"!==c||!1===e.autoRound?Vn:Qn),this._pt.u=d||0,h!==d&&"%"!==d&&(this._pt.b=u,this._pt.r=Hn);else if(c in w)Fr.call(this,t,c,u,a);else{if(!(c in t)){vt(c,a);continue}this.add(t,c,u||t[c],a,r,i)}b.push(c)}C&&Bn(this)},get:yr,aliases:Xn,getSetter:function(t,e,n){var r=Xn[e];return r&&r.indexOf(",")<0&&(e=r),e in Yn&&e!==sr&&(t._gsap.x||yr(t,"x"))?n&&Un===n?"scale"===e?ir:rr:(Un=n||{})&&("scale"===e?ur:ar):t.style&&!it(t.style[e])?er:~e.indexOf("-")?nr:_n(t,e)},core:{_removeProperty:gr,_getMatrix:Mr}};On.utils.checkPrefix=hr,$r=Pt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Wr="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Yn[t]=1})),Pt(Wr,(function(t){W.units[t]="deg",Br[t]=1})),Xn[$r[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Wr,Pt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Xn[e[1]]=$r[e[0]]})),Pt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){W.units[t]="px"})),On.registerPlugin(Gr);var Xr=On.registerPlugin(Gr)||On,Vr=(Xr.core.Tween,/(^\s+|\s+$)/g),Kr=/([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;function Hr(t,e,n,r){for(var i,u=t.firstChild,a=[];u;)3===u.nodeType?(i=(u.nodeValue+"").replace(/^\n+/g,""),r||(i=i.replace(/\s+/g," ")),a.push.apply(a,Qr(i,e,n,r))):"br"===(u.nodeName+"").toLowerCase()?a[a.length-1]+="<br>":a.push(u.outerHTML),u=u.nextSibling;return a}function Qr(t,e,n,r){if(t+="",n&&(t=t.replace(Vr,"")),e&&""!==e)return t.replace(/>/g,"&gt;").replace(/</g,"&lt;").split(e);for(var i,u,a=[],o=t.length,s=0;s<o;s++)((u=t.charAt(s)).charCodeAt(0)>=55296&&u.charCodeAt(0)<=56319||t.charCodeAt(s+1)>=65024&&t.charCodeAt(s+1)<=65039)&&(i=((t.substr(s,12).split(Kr)||[])[1]||"").length||2,u=t.substr(s,i),a.emoji=1,s+=i-1),a.push(">"===u?"&gt;":"<"===u?"&lt;":!r||" "!==u||" "!==t.charAt(s-1)&&" "!==t.charAt(s+1)?u:"&nbsp;");return a}var Zr,ti,ei={version:"3.8.0",name:"text",init:function(t,e,n){var r,i,u,a,o,s,l,D,c=t.nodeName.toUpperCase(),h=this;if(h.svg=t.getBBox&&("TEXT"===c||"TSPAN"===c),!("innerHTML"in t)&&!h.svg)return!1;if(h.target=t,"object"!=typeof e&&(e={value:e}),"value"in e){for(h.delimiter=e.delimiter||"",u=Hr(t,h.delimiter,!1,e.preserveSpaces),ti||(ti=document.createElement("div")),ti.innerHTML=e.value,i=Hr(ti,h.delimiter),h.from=n._from,h.from&&(c=u,u=i,i=c),h.hasClass=!(!e.newClass&&!e.oldClass),h.newClass=e.newClass,h.oldClass=e.oldClass,r=(c=u.length-i.length)<0?u:i,h.fillChar=e.fillChar||(e.padSpace?"&nbsp;":""),c<0&&(c=-c);--c>-1;)r.push(h.fillChar);if("diff"===e.type){for(a=0,o=[],s=[],l="",c=0;c<i.length;c++)(D=i[c])===u[c]?l+=D:(o[a]=l+D,s[a++]=l+u[c],l="");i=o,u=s,l&&(i.push(l),u.push(l))}e.speed&&n.duration(Math.min(.05/e.speed*r.length,e.maxDuration||9999)),this.original=u,this.text=i,this._props.push("text")}else h.text=h.original=[""]},render:function(t,e){t>1?t=1:t<0&&(t=0),e.from&&(t=1-t);var n,r,i,u=e.text,a=e.hasClass,o=e.newClass,s=e.oldClass,l=e.delimiter,D=e.target,c=e.fillChar,h=e.original,d=u.length,p=t*d+.5|0;a?(r=s&&p!==d,i=((n=o&&p)?"<span class='"+o+"'>":"")+u.slice(0,p).join(l)+(n?"</span>":"")+(r?"<span class='"+s+"'>":"")+l+h.slice(p).join(l)+(r?"</span>":"")):i=u.slice(0,p).join(l)+l+h.slice(p).join(l),e.svg?D.textContent=i:D.innerHTML="&nbsp;"===c&&~i.indexOf("  ")?i.split("  ").join("&nbsp;&nbsp;"):i}};ei.splitInnerHTML=Hr,ei.emojiSafeSplit=Qr,ei.getText=function t(e){var n=e.nodeType,r="";if(1===n||9===n||11===n){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=t(e)}else if(3===n||4===n)return e.nodeValue;return r},(Zr||"undefined"!=typeof window&&(Zr=window.gsap)&&Zr.registerPlugin&&Zr)&&Zr.registerPlugin(ei),Xr.registerPlugin(ei);const ni=(t,e,n)=>{let r=0;const i=()=>ii.checkResults(n)?(alert(`${e} wins`),console.log(`${e} wins`),r+=1,ui.showRestartBtn(),!0):9===ii.getTurn()&&(alert("it's a tie!"),ui.showRestartBtn(),!0);function u(){if(5===r)return alert(`${e} wins the match!!!`),ui.showRestartBtn(),!0}return{getNumber:()=>t,getName:()=>e,getMarker:()=>n,computerTurn:()=>{const t=ii.compChoiceLogic();document.querySelector(`#sector-${t}`).textContent=n,ri.setBoard(t,n),ii.setTurn(),i(),u(),console.log("checked for computer win")},playTurn:function(t,e){t.textContent=n,ri.setBoard(e,n),console.log("checked for win player1"),ii.setTurn(),i(),u()},roundWinCheck:i,matchWinCheck:u,resetScore:()=>{r=0},getScore:()=>r}},ri=(()=>{let t=[0,1,2,3,4,5,6,7,8];const e={row1:()=>[0,1,2].map((e=>t[e])),row2:()=>[3,4,5].map((e=>t[e])),row3:()=>[6,7,8].map((e=>t[e])),column1:()=>[0,3,6].map((e=>t[e])),column2:()=>[1,4,7].map((e=>t[e])),column3:()=>[2,5,8].map((e=>t[e])),diagonal1:()=>[0,4,8].map((e=>t[e])),diagonal2:()=>[2,4,6].map((e=>t[e]))};return{getResultCheckSectors:()=>e,getRemainingSectors:function(t){return t.filter((t=>"o"!==t&&"x"!==t))},getBoard:()=>t,setBoard:function(e,n){t.splice(e,1,n)},clearBoard:()=>{t=[0,1,2,3,4,5,6,7,8];const e=document.querySelectorAll(".board-space");for(let t=0;t<e.length;t++)e[t].textContent="",console.log("board cleared")}}})(),ii=(()=>{let t,e,n=0,r="new on the job";const i=()=>o(ri.getBoard(),e.getMarker()).index,u=()=>ri.getRemainingSectors(ri.getBoard())[Math.floor(Math.random()*ri.getRemainingSectors(ri.getBoard()).length)];function a(t){for(const e in ri.getResultCheckSectors())if(ri.getResultCheckSectors()[`${e}`]().join(",")===`${t},${t},${t}`)return!0}function o(n,r){const i=ri.getRemainingSectors(n);if(a(t.getMarker()))return{score:-1};if(a(e.getMarker()))return{score:1};if(0===i.length)return{score:0};const u=[];for(let a=0;a<i.length;a++){const s=[];if(s.index=n[i[a]],n[i[a]]=r,r===e.getMarker()){const e=o(n,t.getMarker());s.score=e.score}else{const t=o(n,e.getMarker());s.score=t.score}n[i[a]]=s.index,u.push(s)}let s;if(r===e.getMarker()){let t=-1/0;for(let e=0;e<u.length;e++)u[e].score>t&&(t=u[e].score,s=e)}else{let t=1/0;for(let e=0;e<u.length;e++)u[e].score<t&&(t=u[e].score,s=e)}return u[s]}return{checkResults:a,setCompDifficulty:t=>{r=t,console.log(r)},getTurn:()=>n,setTurn:()=>{n+=1},resetTurns:()=>{n=0},compChoiceLogic:()=>{if(console.log(r),"unstoppable"===r)return i();if("unstoppable"!==r){const t=100*Math.random();if("highly skilled"===r)return t<75?i():u();if("in training"===r)return t<50?i():u();if("new on the job"===r)return t<25?i():u()}},setPlayer:function(n){return 1===n.getNumber()?(t=n,t):2===n.getNumber()?(e=n,e):void 0},playerOne:t,playerTwo:e,startTimer:(n,r)=>{const i=document.querySelector(n);function u(){i.textContent=r,r-=1,console.log(r),0===r?(clearInterval(a),console.log("interval cleared"),ui.showRestartBtn()):!0!==t.matchWinCheck()&&!0!==e.matchWinCheck()||(clearInterval(a),console.log("interval cleared"))}u();let a=setInterval(u,1e3)}}})(),ui=(()=>{const t=document.querySelector("#gameboard-container"),e=document.querySelector("#enter-btn"),n=document.querySelector("#start-btn"),r=document.querySelector("#player-select-form"),i=document.querySelectorAll(".switch-radio"),u=document.querySelector("#player-two-icon"),a=document.querySelector("#player-one-name"),o=document.querySelector("#player-two-name");let s;document.querySelector("#start-game-container"),document.querySelector("#app-container");const l=document.querySelector("#restart-btn"),D=document.querySelector("#time-mode-btn"),c=document.querySelector("#mode-selector");c.style.visibility="hidden";const h=document.querySelector("#timer"),d=document.querySelector(".selector-label"),p=document.querySelector("#difficulty-selector");let f;function A(t){const e=document.getElementsByClassName(t);for(const t of e)if(t.checked)return console.log(t.checked),t.value}return D.addEventListener("click",(()=>{"hidden"===c.style.visibility?(console.log(c),c.style.visibility="visible",console.log(c)):(console.log("err!"),c.style.visibility="hidden")})),{getDifficulty:()=>s,displayBoard:function(){for(let e=0;e<9;e++){const n=document.createElement("div");n.classList.add("board-space"),n.setAttribute("id",`sector-${e}`),t.appendChild(n),n.addEventListener("click",(()=>{"x"!==n.textContent&&"o"!==n.textContent?ii.getTurn()%2==0&&"computer"===playerTwo.getName()?(playerOne.playTurn(n,e),console.log("player1 turn played"),!0!==ii.checkResults(playerOne.getMarker())&&(playerTwo.computerTurn(),console.log("player2 turn played"))):ii.getTurn()%2==0?playerOne.playTurn(n,e):playerTwo.playTurn(n,e):(ii.checkResults(playerOne.getMarker())||ii.checkResults(playerTwo.getMarker()))&&console.log("round over")}))}},menuController:function(){const t=t=>{t.style.visibility="visible"};e.addEventListener("click",(()=>{Xr.timeline().to("#enter-btn",{duration:1,xPercent:-150},0).to("#intro-screen",{duration:.8,xPercent:-150},.3).to("#player-select-form",{duration:1,xPercent:-150.2,yPercent:0},1).to("#intro-container",{autoAlpha:0,delay:3})})),Xr.timeline().to("#intro-title",{duration:1.5,rotate:720,perspective:500,scale:50,ease:"back.out"}).from("#enter-btn",{duration:1,x:1e3}),i.forEach((t=>{t.addEventListener("change",(()=>(()=>{let t;console.log("run");for(const e of i)if(e.checked)if(console.log(e.checked),t=e.value,"player"===t)p.style.visibility="hidden",d.style.visibility="hidden",u.src="/images/player-two-icon.png",o.value="",o.disabled=!1;else if("computer"===t){u.src="/images/ai-icon.png",o.value="computer",o.disabled=!0,p.textContent="new on the job",p.style.visibility="visible",d.style.visibility="visible";let t=0;p.addEventListener("click",(()=>{const e=["new on the job","in training","highly skilled","unstoppable"];console.log(t),t<3?(t+=1,s=e[t],p.textContent=s,console.log(t)):(t=0,s=e[t],p.textContent=s,console.log(t)),ii.setCompDifficulty(s)}))}})())),console.log(t)})),l.addEventListener("click",(()=>{void 0!==playerOne.matchWinCheck()||void 0!==playerTwo.matchWinCheck()?(ri.clearBoard(),playerOne.resetScore(),playerTwo.resetScore(),ii.resetTurns(),console.log("match reset"),l.style.visibility="hidden",ii.startTimer(".seconds",timerSet)):(ri.clearBoard(),ii.resetTurns(),l.style.visibility="hidden")})),r.addEventListener("submit",(t=>{t.preventDefault();const e=ni(1,a.value,A("player-one-radio")),n=ni(2,o.value,A("player-two-radio"));ii.setPlayer(e),ii.setPlayer(n)})),n.addEventListener("click",(()=>{function e(){const t=new Audio("audio/lightwave - game -theme.wav");"boolean"==typeof t.loop?(t.loop=!0,t.play()):t.addEventListener("ended",(function(){this.currentTime=0,this.play()}),!1)}timerSet=A("time-radio"),console.log(timerSet),f=A("extreme-radio"),console.log(f),console.log(`${timerSet} on click`);const n=Xr.timeline(),r=Xr.timeline(),i=Xr.timeline(),u=Xr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power4"}}),a=Xr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power1.out"}}),o=Xr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power1.out"}}),s=60/130;var l;"endless"===(l=timerSet)?r.to("#gameboard-container",{duration:0,delay:3,autoAlpha:1}).call(e,null,3+s/4):"endless"!=l&&(console.log("timer initialized"),r.to("#gameboard-container",{duration:0,delay:3,autoAlpha:1}).call(e,null,3+s/4).call(ii.startTimer,[".seconds",l],null,3+s/4).call(t,[h],null,3+s/4)),n.to("#player-select-form",{duration:1,xPercent:-300}).to("#player-select-form",{autoAlpha:0}),i.to("#game-container",{duration:1,xPercent:-300,yPercent:-35}).to(".countdown-timer",{duration:2,text:{value:"3 2 1 Begin",delimiter:" "}}).to(".countdown-timer",{duration:0,autoAlpha:0}),u.to(".board-space",{background:"hsla(82, 100%, 55%, .85)"},.61538).to(".board-space",{background:"hsla(43, 100%, 53%, .85)"}).to(".board-space",{background:"hsla(30, 100%, 54%, .85)"}).to(".board-space",{background:"hsla(20, 100%, 55%, .85)"}).to(".board-space",{background:"hsla(13, 100%, 55%, .85)"}).totalDuration(8*s),a.to("#gameboard-container",{scale:1.1}).totalDuration(s),o.to("#gameboard-container",{rotation:90,boxShadow:"hsla(82, 100%, 55%, .85) -10px 5px"},2).to("#gameboard-container",{rotation:180,boxShadow:"hsla(43, 100%, 53%, .85) -10px 5px"},4).to("#gameboard-container",{rotation:270,boxShadow:"hsla(30, 100%, 54%, .85) 10px 5px"},6).to("#gameboard-container",{rotation:360,boxShadow:"hsla(13, 100%, 55%, .85) 10px 5px"},8).totalDuration(16*s)}))},setRadioValue:A,showRestartBtn:()=>{l.style.visibility="visible"}}})();ui.displayBoard(),ui.menuController()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,