/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={414:(t,e,n)=>{n.d(e,{Z:()=>o});var r=n(537),i=n.n(r),s=n(645),u=n.n(s)()(i());u.push([t.id,'@media(max-width: 600px){#player-two-container>.player-select{display:-ms-grid;display:grid;-ms-grid-rows:5vh 20vh 10vh 5vh;grid-template-rows:5vh 20vh 10vh 5vh;grid-row-gap:5vh;margin-top:-10vh}#player-one-container>.player-select{display:-ms-grid;display:grid;-ms-grid-rows:5vh 10vh 10vh 5vh;grid-template-rows:5vh 10vh 10vh 5vh;grid-row-gap:5vh}.player-select>img{width:180px}}html{height:100vh;width:100vw;overflow:hidden;font-size:10px}css-doodle{z-index:-100;position:fixed;top:0;left:0;height:100%;width:100%}#app-container{display:-ms-grid;display:grid;-ms-grid-columns:100vw 100vw 100vw;grid-template-columns:100vw 100vw 100vw;-ms-grid-rows:100vh;grid-template-rows:100vh;gap:50vw;height:100vh;width:auto;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:200vw}#intro-screen{display:-webkit-box;display:-ms-flexbox;display:flex;position:absolute;width:100vw;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;gap:15vh;left:0;right:0;margin-left:auto;margin-right:auto}.g-h1{font-size:.2rem;color:rgba(255,255,255,.85);font-family:"Exo 2",sans-serif}.g-h2{font-size:1rem}.g-btn_label{height:7vh;min-width:15vw;font-size:2.8rem;font-family:"Kanit",sans-serif;color:#fff;border-radius:2%;border-style:solid;border-color:#fff;border-width:1px;background-color:rgba(89,0,255,.363);text-align:center}.g-btn_label:hover{background-color:rgba(89,0,255,.5)}.g-btn_container label{padding-top:1.5vh}.g-btn_container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.g-btn_container input:checked~.g-btn_label{background-color:rgba(89,0,255,.9)}#player-select-form{display:-ms-grid;display:grid;z-index:1;width:100%;grid-template-areas:"one submit two";-ms-grid-rows:100vh;grid-template-rows:100vh;-ms-grid-columns:33.3% [3];grid-template-columns:repeat(3, 33.3%);justify-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}#player-one-container{display:-ms-grid;display:grid;-ms-grid-row:1;-ms-grid-column:1;grid-area:one}#player-one-container .player-select .p1-x{-ms-grid-row:4;grid-row:4;-ms-grid-column:1;grid-column:1}#player-one-container .player-select .p1-o{-ms-grid-row:4;grid-row:4;-ms-grid-column:2;grid-column:2}#player-two-container{display:-ms-grid;display:grid;-ms-grid-row:1;-ms-grid-column:3;grid-area:two}#start-game-container{display:-ms-grid;display:grid;-ms-grid-row:1;-ms-grid-column:2;grid-area:submit;margin-top:75vh;height:7vh;width:10vw;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.player-select{display:-ms-grid;display:grid;-ms-grid-rows:5vh 40vh 10vh 5vh;grid-template-rows:5vh 40vh 10vh 5vh;-ms-grid-columns:15vw 15vw;grid-template-columns:15vw 15vw;-webkit-box-align:center;-ms-flex-align:center;align-items:center;row-gap:3vh;-webkit-column-gap:.8vw;column-gap:.8vw}.player-select>img{display:-ms-grid;display:grid;-ms-grid-column:1;-ms-grid-column-span:2;grid-column:1/span 2;-ms-grid-row:2;grid-row:2;max-width:380px;height:auto;opacity:90%;-ms-grid-column-align:left;justify-self:left;align-self:flex-end;border:3px solid #000;border-radius:3px;margin-top:-8vh}#player-two-container img{-ms-grid-column-align:right;justify-self:right}#player-one-name,#player-two-name{display:-ms-grid;display:grid;-ms-grid-column:1;-ms-grid-column-span:2;grid-column:1/span 2;-ms-grid-row:3;grid-row:3;height:7vh;font-size:2.8rem;width:25vw;background-color:rgba(65,153,6,.61);color:#fff;border:3px #adff2f solid;border-radius:3px}#player-two-name{-ms-grid-column-align:right;justify-self:right}#difficulty-selector{width:20vw;height:7vh;margin-top:-8vh}#start-btn{-ms-grid-column-align:center;justify-self:center}.selector-label{color:#fff;font-size:2rem;margin-top:-11vh;font-family:"Kanit",sans-serif;visibility:hidden;-ms-grid-column-align:center;justify-self:center}#difficulty-selector{font-size:2rem;color:#fff;-ms-grid-column-align:center;justify-self:center;background-color:rgba(65,153,6,.61);color:#fff;border:3px #adff2f solid;border-radius:3px;font-family:"Exo 2",sans-serif;visibility:hidden}.player-toggle label{padding-top:1vh}#time-mode-btn{margin-top:-80vh;width:30vw;height:7vh}#mode-selector{margin-top:-73vh;display:-ms-grid;display:grid;-ms-grid-rows:7vh [5];grid-template-rows:repeat(5, 7vh);-ms-grid-columns:15vw 15vw;grid-template-columns:15vw 15vw;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.time-toggle{-ms-grid-column:1;-ms-grid-column-span:2;grid-column:1/span 2}.time-label{width:30vw}.countdown-timer{z-index:10;position:fixed;margin-top:1000px;font-size:5rem;color:#fff;font-family:"Exo 2",sans-serif}#timer{z-index:10;position:fixed;margin-top:800px;font-size:5rem;color:#fff;font-family:"Exo 2",sans-serif;visibility:hidden}#game-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;z-index:0}#restart-btn{z-index:10;position:fixed;margin-top:1600px;visibility:hidden}#gameboard-container{height:100%;display:-ms-grid;display:grid;-ms-grid-rows:150px [3];grid-template-rows:repeat(3, 150px);-ms-grid-columns:150px [3];grid-template-columns:repeat(3, 150px);margin-top:1000px;z-index:0;visibility:hidden;-webkit-box-shadow:rgba(126,255,46,.85) 10px 0px;box-shadow:rgba(126,255,46,.85) 10px 0px}.board-space{height:150px;width:150px;border:solid rgba(0,0,0,.85) 3px;background:rgba(126,255,46,.85);font-size:5rem;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}#player-one-score{margin-left:-60vw}#player-two-score{margin-left:60vw}#result-announce{position:absolute;color:#fff;margin-top:100vh}.score-containers{display:-webkit-box;display:-ms-flexbox;display:flex;gap:5px;border:solid #fff 3px;position:fixed;height:100px;width:30vw;margin-top:1600px}.player-point{height:8vh;width:5vw;background-color:green}.win-announce{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA,yBACE,qCACE,gBAAA,CACA,YAAA,CACA,+BAAA,CACI,oCAAA,CACJ,gBAAA,CACA,gBAAA,CAEF,qCACE,gBAAA,CACA,YAAA,CACA,+BAAA,CACI,oCAAA,CACJ,gBAAA,CAEF,mBACE,WAAA,CAAA,CAIJ,KACE,YAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CAGF,WACE,YAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,UAAA,CAGF,eACE,gBAAA,CACA,YAAA,CACA,kCAAA,CACI,uCAAA,CACJ,mBAAA,CACI,wBAAA,CACJ,QAAA,CACA,YAAA,CACA,UAAA,CACA,uBAAA,CACI,oBAAA,CACI,sBAAA,CACR,wBAAA,CACI,qBAAA,CACI,kBAAA,CACR,iBAAA,CAGF,cACE,mBAAA,CACA,mBAAA,CACA,YAAA,CACA,iBAAA,CACA,WAAA,CACA,2BAAA,CACA,4BAAA,CACI,yBAAA,CACI,qBAAA,CACR,wBAAA,CACI,qBAAA,CACI,kBAAA,CACR,uBAAA,CACI,oBAAA,CACI,sBAAA,CACR,QAAA,CACA,MAAA,CACA,OAAA,CACA,gBAAA,CACA,iBAAA,CAGF,MACE,eAAA,CACA,2BAAA,CACA,8BAAA,CAGF,MACE,cAAA,CAGF,aACE,UAAA,CACA,cAAA,CACA,gBAAA,CACA,8BAAA,CACA,UAAA,CACA,gBAAA,CACA,kBAAA,CACA,iBAAA,CACA,gBAAA,CACA,oCAAA,CACA,iBAAA,CAGF,mBACE,kCAAA,CAGF,uBACE,iBAAA,CAGF,uBACE,iBAAA,CACA,SAAA,CACA,cAAA,CACA,QAAA,CACA,OAAA,CAGF,4CACE,kCAAA,CAGF,oBACE,gBAAA,CACA,YAAA,CACA,SAAA,CACA,UAAA,CACI,oCAAA,CACJ,mBAAA,CACI,wBAAA,CACJ,0BAAA,CACI,sCAAA,CACJ,oBAAA,CACA,wBAAA,CACI,qBAAA,CACI,kBAAA,CAGV,sBACE,gBAAA,CACA,YAAA,CACA,cAAA,CACA,iBAAA,CACA,aAAA,CAGF,2CACE,cAAA,CACA,UAAA,CACA,iBAAA,CACA,aAAA,CAGF,2CACE,cAAA,CACA,UAAA,CACA,iBAAA,CACA,aAAA,CAGF,sBACE,gBAAA,CACA,YAAA,CACA,cAAA,CACA,iBAAA,CACA,aAAA,CAGF,sBACE,gBAAA,CACA,YAAA,CACA,cAAA,CACA,iBAAA,CACA,gBAAA,CACA,eAAA,CACA,UAAA,CACA,UAAA,CACA,uBAAA,CACI,oBAAA,CACI,sBAAA,CAGV,eACE,gBAAA,CACA,YAAA,CACA,+BAAA,CACI,oCAAA,CACJ,0BAAA,CACI,+BAAA,CACJ,wBAAA,CACI,qBAAA,CACI,kBAAA,CACR,WAAA,CACA,uBAAA,CACQ,eAAA,CAGV,mBACE,gBAAA,CACA,YAAA,CACA,iBAAA,CACA,sBAAA,CACA,oBAAA,CACA,cAAA,CACA,UAAA,CACA,eAAA,CACA,WAAA,CACA,WAAA,CACA,0BAAA,CACI,iBAAA,CACJ,mBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CAGF,0BACE,2BAAA,CACI,kBAAA,CAGN,kCAEE,gBAAA,CACA,YAAA,CACA,iBAAA,CACA,sBAAA,CACA,oBAAA,CACA,cAAA,CACA,UAAA,CACA,UAAA,CACA,gBAAA,CACA,UAAA,CACA,mCAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CAGF,iBACE,2BAAA,CACI,kBAAA,CAGN,qBACE,UAAA,CACA,UAAA,CACA,eAAA,CAGF,WACE,4BAAA,CACI,mBAAA,CAGN,gBACE,UAAA,CACA,cAAA,CACA,gBAAA,CACA,8BAAA,CACA,iBAAA,CACA,4BAAA,CACI,mBAAA,CAGN,qBACE,cAAA,CACA,UAAA,CACA,4BAAA,CACI,mBAAA,CACJ,mCAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CACA,8BAAA,CACA,iBAAA,CAGF,qBACE,eAAA,CAGF,eACE,gBAAA,CACA,UAAA,CACA,UAAA,CAGF,eACE,gBAAA,CACA,gBAAA,CACA,YAAA,CACA,qBAAA,CACI,iCAAA,CACJ,0BAAA,CACI,+BAAA,CACJ,wBAAA,CACI,qBAAA,CACI,kBAAA,CAGV,aACE,iBAAA,CACA,sBAAA,CACA,oBAAA,CAGF,YACE,UAAA,CAGF,iBACE,UAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,8BAAA,CAGF,OACE,UAAA,CACA,cAAA,CACA,gBAAA,CACA,cAAA,CACA,UAAA,CACA,8BAAA,CACA,iBAAA,CAGF,gBACE,mBAAA,CACA,mBAAA,CACA,YAAA,CACA,uBAAA,CACI,oBAAA,CACI,sBAAA,CACR,SAAA,CAGF,aACE,UAAA,CACA,cAAA,CACA,iBAAA,CACA,iBAAA,CAGF,qBACE,WAAA,CACA,gBAAA,CACA,YAAA,CACA,uBAAA,CACI,mCAAA,CACJ,0BAAA,CACI,sCAAA,CACJ,iBAAA,CACA,SAAA,CACA,iBAAA,CACA,gDAAA,CACQ,wCAAA,CAGV,aACE,YAAA,CACA,WAAA,CACA,gCAAA,CACA,+BAAA,CACA,cAAA,CACA,mBAAA,CACA,mBAAA,CACA,YAAA,CACA,wBAAA,CACI,qBAAA,CACI,kBAAA,CACR,uBAAA,CACI,oBAAA,CACI,sBAAA,CAGV,kBACE,iBAAA,CAGF,kBACE,gBAAA,CAGF,iBACE,iBAAA,CACA,UAAA,CACA,gBAAA,CAGF,kBACE,mBAAA,CACA,mBAAA,CACA,YAAA,CACA,OAAA,CACA,qBAAA,CACA,cAAA,CACA,YAAA,CACA,UAAA,CACA,iBAAA,CAGF,cACE,UAAA,CACA,SAAA,CACA,sBAAA,CAGF,cACE,mBAAA,CACA,mBAAA,CACA,YAAA,CACA,wBAAA,CACI,qBAAA,CACI,kBAAA,CACR,uBAAA,CACI,oBAAA,CACI,sBAAA",sourcesContent:['@media (max-width: 600px) {\n  #player-two-container > .player-select {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-rows: 5vh 20vh 10vh 5vh;\n        grid-template-rows: 5vh 20vh 10vh 5vh;\n    grid-row-gap: 5vh;\n    margin-top: -10vh;\n  }\n  #player-one-container > .player-select {\n    display: -ms-grid;\n    display: grid;\n    -ms-grid-rows: 5vh 10vh 10vh 5vh;\n        grid-template-rows: 5vh 10vh 10vh 5vh;\n    grid-row-gap: 5vh;\n  }\n  .player-select > img {\n    width: 180px;\n  }\n}\n\nhtml {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n  font-size: 10px;\n}\n\ncss-doodle {\n  z-index: -100;\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n\n#app-container {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-columns: 100vw 100vw 100vw;\n      grid-template-columns: 100vw 100vw 100vw;\n  -ms-grid-rows: 100vh;\n      grid-template-rows: 100vh;\n  gap: 50vw;\n  height: 100vh;\n  width: auto;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin-left: 200vw;\n}\n\n#intro-screen {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: absolute;\n  width: 100vw;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  gap: 15vh;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.g-h1 {\n  font-size: 0.2rem;\n  color: rgba(255, 255, 255, 0.85);\n  font-family: "Exo 2", sans-serif;\n}\n\n.g-h2 {\n  font-size: 1rem;\n}\n\n.g-btn_label {\n  height: 7vh;\n  min-width: 15vw;\n  font-size: 2.8rem;\n  font-family: "Kanit", sans-serif;\n  color: white;\n  border-radius: 2%;\n  border-style: solid;\n  border-color: white;\n  border-width: 1px;\n  background-color: rgba(89, 0, 255, 0.363);\n  text-align: center;\n}\n\n.g-btn_label:hover {\n  background-color: rgba(89, 0, 255, 0.5);\n}\n\n.g-btn_container label {\n  padding-top: 1.5vh;\n}\n\n.g-btn_container input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n\n.g-btn_container input:checked ~ .g-btn_label {\n  background-color: rgba(89, 0, 255, 0.9);\n}\n\n#player-select-form {\n  display: -ms-grid;\n  display: grid;\n  z-index: 1;\n  width: 100%;\n      grid-template-areas: "one submit two";\n  -ms-grid-rows: 100vh;\n      grid-template-rows: 100vh;\n  -ms-grid-columns: (33.3%)[3];\n      grid-template-columns: repeat(3, 33.3%);\n  justify-items: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n#player-one-container {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-row: 1;\n  -ms-grid-column: 1;\n  grid-area: one;\n}\n\n#player-one-container .player-select .p1-x {\n  -ms-grid-row: 4;\n  grid-row: 4;\n  -ms-grid-column: 1;\n  grid-column: 1;\n}\n\n#player-one-container .player-select .p1-o {\n  -ms-grid-row: 4;\n  grid-row: 4;\n  -ms-grid-column: 2;\n  grid-column: 2;\n}\n\n#player-two-container {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-row: 1;\n  -ms-grid-column: 3;\n  grid-area: two;\n}\n\n#start-game-container {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-row: 1;\n  -ms-grid-column: 2;\n  grid-area: submit;\n  margin-top: 75vh;\n  height: 7vh;\n  width: 10vw;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n.player-select {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-rows: 5vh 40vh 10vh 5vh;\n      grid-template-rows: 5vh 40vh 10vh 5vh;\n  -ms-grid-columns: 15vw 15vw;\n      grid-template-columns: 15vw 15vw;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  row-gap: 3vh;\n  -webkit-column-gap: 0.8vw;\n          column-gap: 0.8vw;\n}\n\n.player-select > img {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-column: 1;\n  -ms-grid-column-span: 2;\n  grid-column: 1 / span 2;\n  -ms-grid-row: 2;\n  grid-row: 2;\n  max-width: 380px;\n  height: auto;\n  opacity: 90%;\n  -ms-grid-column-align: left;\n      justify-self: left;\n  align-self: flex-end;\n  border: 3px solid black;\n  border-radius: 3px;\n  margin-top: -8vh;\n}\n\n#player-two-container img {\n  -ms-grid-column-align: right;\n      justify-self: right;\n}\n\n#player-one-name,\n#player-two-name {\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-column: 1;\n  -ms-grid-column-span: 2;\n  grid-column: 1 / span 2;\n  -ms-grid-row: 3;\n  grid-row: 3;\n  height: 7vh;\n  font-size: 2.8rem;\n  width: 25vw;\n  background-color: rgba(65, 153, 6, 0.61);\n  color: white;\n  border: 3px greenyellow solid;\n  border-radius: 3px;\n}\n\n#player-two-name {\n  -ms-grid-column-align: right;\n      justify-self: right;\n}\n\n#difficulty-selector {\n  width: 20vw;\n  height: 7vh;\n  margin-top: -8vh;\n}\n\n#start-btn {\n  -ms-grid-column-align: center;\n      justify-self: center;\n}\n\n.selector-label {\n  color: white;\n  font-size: 2rem;\n  margin-top: -11vh;\n  font-family: "Kanit", sans-serif;\n  visibility: hidden;\n  -ms-grid-column-align: center;\n      justify-self: center;\n}\n\n#difficulty-selector {\n  font-size: 2rem;\n  color: white;\n  -ms-grid-column-align: center;\n      justify-self: center;\n  background-color: rgba(65, 153, 6, 0.61);\n  color: white;\n  border: 3px greenyellow solid;\n  border-radius: 3px;\n  font-family: "Exo 2", sans-serif;\n  visibility: hidden;\n}\n\n.player-toggle label {\n  padding-top: 1vh;\n}\n\n#time-mode-btn {\n  margin-top: -80vh;\n  width: 30vw;\n  height: 7vh;\n}\n\n#mode-selector {\n  margin-top: -73vh;\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-rows: (7vh)[5];\n      grid-template-rows: repeat(5, 7vh);\n  -ms-grid-columns: 15vw 15vw;\n      grid-template-columns: 15vw 15vw;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.time-toggle {\n  -ms-grid-column: 1;\n  -ms-grid-column-span: 2;\n  grid-column: 1 / span 2;\n}\n\n.time-label {\n  width: 30vw;\n}\n\n.countdown-timer {\n  z-index: 10;\n  position: fixed;\n  margin-top: 1000px;\n  font-size: 5rem;\n  color: white;\n  font-family: "Exo 2", sans-serif;\n}\n\n#timer {\n  z-index: 10;\n  position: fixed;\n  margin-top: 800px;\n  font-size: 5rem;\n  color: white;\n  font-family: "Exo 2", sans-serif;\n  visibility: hidden;\n}\n\n#game-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  z-index: 0;\n}\n\n#restart-btn {\n  z-index: 10;\n  position: fixed;\n  margin-top: 1600px;\n  visibility: hidden;\n}\n\n#gameboard-container {\n  height: 100%;\n  display: -ms-grid;\n  display: grid;\n  -ms-grid-rows: (150px)[3];\n      grid-template-rows: repeat(3, 150px);\n  -ms-grid-columns: (150px)[3];\n      grid-template-columns: repeat(3, 150px);\n  margin-top: 1000px;\n  z-index: 0;\n  visibility: hidden;\n  -webkit-box-shadow: rgba(126, 255, 46, 0.85) 10px 0px;\n          box-shadow: rgba(126, 255, 46, 0.85) 10px 0px;\n}\n\n.board-space {\n  height: 150px;\n  width: 150px;\n  border: solid rgba(0, 0, 0, 0.85) 3px;\n  background: rgba(126, 255, 46, 0.85);\n  font-size: 5rem;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n#player-one-score {\n  margin-left: -60vw;\n}\n\n#player-two-score {\n  margin-left: 60vw;\n}\n\n#result-announce {\n  position: absolute;\n  color: white;\n  margin-top: 100vh;\n}\n\n.score-containers {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  gap: 5px;\n  border: solid white 3px;\n  position: fixed;\n  height: 100px;\n  width: 30vw;\n  margin-top: 1600px;\n}\n\n.player-point {\n  height: 8vh;\n  width: 5vw;\n  background-color: green;\n}\n\n.win-announce {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n/*# sourceMappingURL=style.css.map */'],sourceRoot:""}]);const o=u},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var u={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(u[a]=!0)}for(var l=0;l<t.length;l++){var A=[].concat(t[l]);r&&u[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */"),u=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(u).concat([s]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var s={},u=[],o=0;o<t.length;o++){var a=t[o],l=r.base?a[0]+r.base:a[0],A=s[l]||0,c="".concat(l," ").concat(A);s[l]=A+1;var D=n(c),h={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==D)e[D].references++,e[D].updater(h);else{var d=i(h,r);r.byIndex=o,e.splice(o,0,{identifier:c,updater:d,references:1})}u.push(c)}return u}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var u=0;u<s.length;u++){var o=n(s[u]);e[o].references--}for(var a=r(t,i),l=0;l<s.length;l++){var A=n(s[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}s=a}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={id:r,exports:{}};return t[r](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(795),i=n.n(r),s=n(569),u=n.n(s),o=n(565),a=n.n(o),l=n(216),A=n.n(l),c=n(589),D=n.n(c),h=n(414),d={};function p(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}d.styleTagTransform=D(),d.setAttributes=a(),d.insert=u().bind(null,"head"),d.domAPI=i(),d.insertStyleElement=A(),e()(h.Z,d),h.Z&&h.Z.locals&&h.Z.locals;var m,C,g,_,v,y,b,F,w,x,E,B,k,T,M,S,O,I,z,P,R,U,j,q,L,G,Y,N,W={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},V={duration:.5,overwrite:!1,delay:0},X=1e8,J=1e-8,$=2*Math.PI,H=$/4,Q=0,Z=Math.sqrt,K=Math.cos,tt=Math.sin,et=function(t){return"string"==typeof t},nt=function(t){return"function"==typeof t},rt=function(t){return"number"==typeof t},it=function(t){return void 0===t},st=function(t){return"object"==typeof t},ut=function(t){return!1!==t},ot=function(){return"undefined"!=typeof window},at=function(t){return nt(t)||et(t)},lt="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},At=Array.isArray,ct=/(?:-?\.?\d|\.)+/gi,Dt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,ht=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,dt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,pt=/[+-]=-?[.\d]+/,ft=/[^,'"\[\]\s]+/gi,mt=/[\d.+\-=]+(?:e[-+]\d*)*/i,Ct={},gt={},_t=function(t){return(gt=Vt(t,Ct))&&On},vt=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},yt=function(t,e){return!e&&console.warn(t)},bt=function(t,e){return t&&(Ct[t]=e)&&gt&&(gt[t]=e)||Ct},Ft=function(){return 0},wt={},xt=[],Et={},Bt={},kt={},Tt=30,Mt=[],St="",Ot=function(t){var e,n,r=t[0];if(st(r)||nt(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(n=Mt.length;n--&&!Mt[n].targetTest(r););e=Mt[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new rn(t[n],e)))||t.splice(n,1);return t},It=function(t){return t._gsap||Ot(ye(t))[0]._gsap},zt=function(t,e,n){return(n=t[e])&&nt(n)?t[e]():it(n)&&t.getAttribute&&t.getAttribute(e)||n},Pt=function(t,e){return(t=t.split(",")).forEach(e)||t},Rt=function(t){return Math.round(1e5*t)/1e5||0},Ut=function(t){return Math.round(1e7*t)/1e7||0},jt=function(t,e){for(var n=e.length,r=0;t.indexOf(e[r])<0&&++r<n;);return r<n},qt=function(){var t,e,n=xt.length,r=xt.slice(0);for(Et={},xt.length=0,t=0;t<n;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Lt=function(t,e,n,r){xt.length&&qt(),t.render(e,n,r),xt.length&&qt()},Gt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(ft).length<2?e:et(t)?t.trim():t},Yt=function(t){return t},Nt=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},Wt=function(t,e){for(var n in e)n in t||"duration"===n||"ease"===n||(t[n]=e[n])},Vt=function(t,e){for(var n in e)t[n]=e[n];return t},Xt=function t(e,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=st(n[r])?t(e[r]||(e[r]={}),n[r]):n[r]);return e},Jt=function(t,e){var n,r={};for(n in t)n in e||(r[n]=t[n]);return r},$t=function(t){var e=t.parent||C,n=t.keyframes?Wt:Nt;if(ut(t.inherit))for(;e;)n(t,e.vars.defaults),e=e.parent||e._dp;return t},Ht=function(t,e,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=e._prev,s=e._next;i?i._next=s:t[n]===e&&(t[n]=s),s?s._prev=i:t[r]===e&&(t[r]=i),e._next=e._prev=e.parent=null},Qt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Zt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},Kt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},te=function t(e){return!e||e._ts&&t(e.parent)},ee=function(t){return t._repeat?ne(t._tTime,t=t.duration()+t._rDelay)*t:0},ne=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},re=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},ie=function(t){return t._end=Ut(t._start+(t._tDur/Math.abs(t._ts||t._rts||J)||0))},se=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=Ut(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),ie(t),n._dirty||Zt(n,t)),t},ue=function(t,e){var n;if((e._time||e._initted&&!e._dur)&&(n=re(t.rawTime(),e),(!e._dur||Ce(0,e.totalDuration(),n)-e._tTime>J)&&e.render(n,!0)),Zt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},oe=function(t,e,n,r){return e.parent&&Qt(e),e._start=Ut((rt(n)?n:n||t!==C?pe(t,n,e):t._time)+e._delay),e._end=Ut(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var s,u=t[r];if(i)for(s=e[i];u&&u[i]>s;)u=u._prev;u?(e._next=u._next,u._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[r]=e,e._prev=u,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),ce(e)||(t._recent=e),r||ue(t,e),t},ae=function(t,e){return(Ct.ScrollTrigger||vt("scrollTrigger",e))&&Ct.ScrollTrigger.create(e,t)},le=function(t,e,n,r){return cn(t,e),t._initted?!n&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&b!==Ne.frame?(xt.push(t),t._lazy=[e,r],1):void 0:1},Ae=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},ce=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},De=function(t,e,n,r){var i=t._repeat,s=Ut(e)||0,u=t._tTime/t._tDur;return u&&!r&&(t._time*=s/t._dur),t._dur=s,t._tDur=i?i<0?1e10:Ut(s*(i+1)+t._rDelay*i):s,u&&!r?se(t,t._tTime=t._tDur*u):t.parent&&ie(t),n||Zt(t.parent,t),t},he=function(t){return t instanceof un?Zt(t):De(t,t._dur)},de={_start:0,endTime:Ft,totalDuration:Ft},pe=function t(e,n,r){var i,s,u,o=e.labels,a=e._recent||de,l=e.duration()>=X?a.endTime(!1):e._dur;return et(n)&&(isNaN(n)||n in o)?(s=n.charAt(0),u="%"===n.substr(-1),i=n.indexOf("="),"<"===s||">"===s?(i>=0&&(n=n.replace(/=/,"")),("<"===s?a._start:a.endTime(a._repeat>=0))+(parseFloat(n.substr(1))||0)*(u?(i<0?a:r).totalDuration()/100:1)):i<0?(n in o||(o[n]=l),o[n]):(s=parseFloat(n.charAt(i-1)+n.substr(i+1)),u&&r&&(s=s/100*(At(r)?r[0]:r).totalDuration()),i>1?t(e,n.substr(0,i-1),r)+s:l+s)):null==n?l:+n},fe=function(t,e,n){var r,i,s=rt(e[1]),u=(s?2:1)+(t<2?0:1),o=e[u];if(s&&(o.duration=e[1]),o.parent=n,t){for(r=o,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=ut(i.vars.inherit)&&i.parent;o.immediateRender=ut(r.immediateRender),t<2?o.runBackwards=1:o.startAt=e[u-1]}return new pn(e[0],o,e[u+1])},me=function(t,e){return t||0===t?e(t):e},Ce=function(t,e,n){return n<t?t:n>e?e:n},ge=function(t){if("string"!=typeof t)return"";var e=mt.exec(t);return e?t.substr(e.index+e[0].length):""},_e=[].slice,ve=function(t,e){return t&&st(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&st(t[0]))&&!t.nodeType&&t!==g},ye=function(t,e,n){return!et(t)||n||!_&&We()?At(t)?function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var r;return et(t)&&!e||ve(t,1)?(r=n).push.apply(r,ye(t)):n.push(t)}))||n}(t,n):ve(t)?_e.call(t,0):t?[t]:[]:_e.call((e||v).querySelectorAll(t),0)},be=function(t){return t.sort((function(){return.5-Math.random()}))},Fe=function(t){if(nt(t))return t;var e=st(t)?t:{each:t},n=Ze(e.ease),r=e.from||0,i=parseFloat(e.base)||0,s={},u=r>0&&r<1,o=isNaN(r)||u,a=e.axis,l=r,A=r;return et(r)?l=A={center:.5,edges:.5,end:1}[r]||0:!u&&o&&(l=r[0],A=r[1]),function(t,u,c){var D,h,d,p,f,m,C,g,_,v=(c||e).length,y=s[v];if(!y){if(!(_="auto"===e.grid?0:(e.grid||[1,X])[1])){for(C=-X;C<(C=c[_++].getBoundingClientRect().left)&&_<v;);_--}for(y=s[v]=[],D=o?Math.min(_,v)*l-.5:r%_,h=o?v*A/_-.5:r/_|0,C=0,g=X,m=0;m<v;m++)d=m%_-D,p=h-(m/_|0),y[m]=f=a?Math.abs("y"===a?p:d):Z(d*d+p*p),f>C&&(C=f),f<g&&(g=f);"random"===r&&be(y),y.max=C-g,y.min=g,y.v=v=(parseFloat(e.amount)||parseFloat(e.each)*(_>v?v-1:a?"y"===a?v/_:_:Math.max(_,v/_))||0)*("edges"===r?-1:1),y.b=v<0?i-v:i,y.u=ge(e.amount||e.each)||0,n=n&&v<0?He(n):n}return v=(y[t]-y.min)/y.max||0,Ut(y.b+(n?n(v):v)*y.v)+y.u}},we=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var r=Math.round(parseFloat(n)/t)*t*e;return(r-r%1)/e+(rt(n)?0:ge(n))}},xe=function(t,e){var n,r,i=At(t);return!i&&st(t)&&(n=i=t.radius||X,t.values?(t=ye(t.values),(r=!rt(t[0]))&&(n*=n)):t=we(t.increment)),me(e,i?nt(t)?function(e){return r=t(e),Math.abs(r-e)<=n?r:e}:function(e){for(var i,s,u=parseFloat(r?e.x:e),o=parseFloat(r?e.y:0),a=X,l=0,A=t.length;A--;)(i=r?(i=t[A].x-u)*i+(s=t[A].y-o)*s:Math.abs(t[A]-u))<a&&(a=i,l=A);return l=!n||a<=n?t[l]:e,r||l===e||rt(e)?l:l+ge(e)}:we(t))},Ee=function(t,e,n,r){return me(At(t)?!e:!0===n?!!(n=0):!r,(function(){return At(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*r)/r}))},Be=function(t,e,n){return me(n,(function(n){return t[~~e(n)]}))},ke=function(t){for(var e,n,r,i,s=0,u="";~(e=t.indexOf("random(",s));)r=t.indexOf(")",e),i="["===t.charAt(e+7),n=t.substr(e+7,r-e-7).match(i?ft:ct),u+=t.substr(s,e-s)+Ee(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),s=r+1;return u+t.substr(s,t.length-s)},Te=function(t,e,n,r,i){var s=e-t,u=r-n;return me(i,(function(e){return n+((e-t)/s*u||0)}))},Me=function(t,e,n){var r,i,s,u=t.labels,o=X;for(r in u)(i=u[r]-e)<0==!!n&&i&&o>(i=Math.abs(i))&&(s=r,o=i);return s},Se=function(t,e,n){var r,i,s=t.vars,u=s[e];if(u)return r=s[e+"Params"],i=s.callbackScope||t,n&&xt.length&&qt(),r?u.apply(i,r):u.call(i)},Oe=function(t){return Qt(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&Se(t,"onInterrupt"),t},Ie=function(t){var e=(t=!t.name&&t.default||t).name,n=nt(t),r=e&&!n&&t.init?function(){this._props=[]}:t,i={init:Ft,render:Fn,add:ln,kill:xn,modifier:wn,rawVars:0},s={targetTest:0,get:0,getSetter:_n,aliases:{},register:0};if(We(),t!==r){if(Bt[e])return;Nt(r,Nt(Jt(t,i),s)),Vt(r.prototype,Vt(i,Jt(t,s))),Bt[r.prop=e]=r,t.targetTest&&(Mt.push(r),wt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}bt(e,r),t.register&&t.register(On,r,kn)},ze=255,Pe={aqua:[0,ze,ze],lime:[0,ze,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ze],navy:[0,0,128],white:[ze,ze,ze],olive:[128,128,0],yellow:[ze,ze,0],orange:[ze,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ze,0,0],pink:[ze,192,203],cyan:[0,ze,ze],transparent:[ze,ze,ze,0]},Re=function(t,e,n){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*ze+.5|0},Ue=function(t,e,n){var r,i,s,u,o,a,l,A,c,D,h=t?rt(t)?[t>>16,t>>8&ze,t&ze]:0:Pe.black;if(!h){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Pe[t])h=Pe[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),i=t.charAt(2),s=t.charAt(3),t="#"+r+r+i+i+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(h=parseInt(t.substr(1,6),16))>>16,h>>8&ze,h&ze,parseInt(t.substr(7),16)/255];h=[(t=parseInt(t.substr(1),16))>>16,t>>8&ze,t&ze]}else if("hsl"===t.substr(0,3))if(h=D=t.match(ct),e){if(~t.indexOf("="))return h=t.match(Dt),n&&h.length<4&&(h[3]=1),h}else u=+h[0]%360/360,o=+h[1]/100,r=2*(a=+h[2]/100)-(i=a<=.5?a*(o+1):a+o-a*o),h.length>3&&(h[3]*=1),h[0]=Re(u+1/3,r,i),h[1]=Re(u,r,i),h[2]=Re(u-1/3,r,i);else h=t.match(ct)||Pe.transparent;h=h.map(Number)}return e&&!D&&(r=h[0]/ze,i=h[1]/ze,s=h[2]/ze,a=((l=Math.max(r,i,s))+(A=Math.min(r,i,s)))/2,l===A?u=o=0:(c=l-A,o=a>.5?c/(2-l-A):c/(l+A),u=l===r?(i-s)/c+(i<s?6:0):l===i?(s-r)/c+2:(r-i)/c+4,u*=60),h[0]=~~(u+.5),h[1]=~~(100*o+.5),h[2]=~~(100*a+.5)),n&&h.length<4&&(h[3]=1),h},je=function(t){var e=[],n=[],r=-1;return t.split(Le).forEach((function(t){var i=t.match(ht)||[];e.push.apply(e,i),n.push(r+=i.length+1)})),e.c=n,e},qe=function(t,e,n){var r,i,s,u,o="",a=(t+o).match(Le),l=e?"hsla(":"rgba(",A=0;if(!a)return t;if(a=a.map((function(t){return(t=Ue(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(s=je(t),(r=n.c).join(o)!==s.c.join(o)))for(u=(i=t.replace(Le,"1").split(ht)).length-1;A<u;A++)o+=i[A]+(~r.indexOf(A)?a.shift()||l+"0,0,0,0)":(s.length?s:a.length?a:n).shift());if(!i)for(u=(i=t.split(Le)).length-1;A<u;A++)o+=i[A]+a[A];return o+i[u]},Le=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Pe)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ge=/hsl[a]?\(/,Ye=function(t){var e,n=t.join(" ");if(Le.lastIndex=0,Le.test(n))return e=Ge.test(n),t[1]=qe(t[1],e),t[0]=qe(t[0],e,je(t[1])),!0},Ne=(S=Date.now,O=500,I=33,z=S(),P=z,U=R=1e3/240,q=function t(e){var n,r,i,s,u=S()-P,o=!0===e;if(u>O&&(z+=u-I),((n=(i=(P+=u)-z)-U)>0||o)&&(s=++k.frame,T=i-1e3*k.time,k.time=i/=1e3,U+=n+(n>=R?4:R-n),r=1),o||(x=E(t)),r)for(M=0;M<j.length;M++)j[M](i,T,s,e)},k={time:0,frame:0,tick:function(){q(!0)},deltaRatio:function(t){return T/(1e3/(t||60))},wake:function(){y&&(!_&&ot()&&(g=_=window,v=g.document||{},Ct.gsap=On,(g.gsapVersions||(g.gsapVersions=[])).push(On.version),_t(gt||g.GreenSockGlobals||!g.gsap&&g||{}),B=g.requestAnimationFrame),x&&k.sleep(),E=B||function(t){return setTimeout(t,U-1e3*k.time+1|0)},w=1,q(2))},sleep:function(){(B?g.cancelAnimationFrame:clearTimeout)(x),w=0,E=Ft},lagSmoothing:function(t,e){O=t||1e8,I=Math.min(e,O,0)},fps:function(t){R=1e3/(t||240),U=1e3*k.time+R},add:function(t){j.indexOf(t)<0&&j.push(t),We()},remove:function(t){var e;~(e=j.indexOf(t))&&j.splice(e,1)&&M>=e&&M--},_listeners:j=[]}),We=function(){return!w&&Ne.wake()},Ve={},Xe=/^[\d.\-M][\d.\-,\s]/,Je=/["']/g,$e=function(t){for(var e,n,r,i={},s=t.substr(1,t.length-3).split(":"),u=s[0],o=1,a=s.length;o<a;o++)n=s[o],e=o!==a-1?n.lastIndexOf(","):n.length,r=n.substr(0,e),i[u]=isNaN(r)?r.replace(Je,"").trim():+r,u=n.substr(e+1).trim();return i},He=function(t){return function(e){return 1-t(1-e)}},Qe=function t(e,n){for(var r,i=e._first;i;)i instanceof un?t(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?t(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Ze=function(t,e){return t&&(nt(t)?t:Ve[t]||function(t){var e,n,r,i,s=(t+"").split("("),u=Ve[s[0]];return u&&s.length>1&&u.config?u.config.apply(null,~t.indexOf("{")?[$e(s[1])]:(e=t,n=e.indexOf("(")+1,r=e.indexOf(")"),i=e.indexOf("(",n),e.substring(n,~i&&i<r?e.indexOf(")",r+1):r)).split(",").map(Gt)):Ve._CE&&Xe.test(t)?Ve._CE("",t):u}(t))||e},Ke=function(t,e,n,r){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,s={easeIn:e,easeOut:n,easeInOut:r};return Pt(t,(function(t){for(var e in Ve[t]=Ct[t]=s,Ve[i=t.toLowerCase()]=n,s)Ve[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ve[t+"."+e]=s[e]})),s},tn=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},en=function t(e,n,r){var i=n>=1?n:1,s=(r||(e?.3:.45))/(n<1?n:1),u=s/$*(Math.asin(1/i)||0),o=function(t){return 1===t?1:i*Math.pow(2,-10*t)*tt((t-u)*s)+1},a="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:tn(o);return s=$/s,a.config=function(n,r){return t(e,n,r)},a},nn=function t(e,n){void 0===n&&(n=1.70158);var r=function(t){return t?--t*t*((n+1)*t+n)+1:0},i="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:tn(r);return i.config=function(n){return t(e,n)},i};Pt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;Ke(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),Ve.Linear.easeNone=Ve.none=Ve.Linear.easeIn,Ke("Elastic",en("in"),en("out"),en()),L=7.5625,Y=1/(G=2.75),Ke("Bounce",(function(t){return 1-N(1-t)}),N=function(t){return t<Y?L*t*t:t<.7272727272727273?L*Math.pow(t-1.5/G,2)+.75:t<.9090909090909092?L*(t-=2.25/G)*t+.9375:L*Math.pow(t-2.625/G,2)+.984375}),Ke("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Ke("Circ",(function(t){return-(Z(1-t*t)-1)})),Ke("Sine",(function(t){return 1===t?1:1-K(t*H)})),Ke("Back",nn("in"),nn("out"),nn()),Ve.SteppedEase=Ve.steps=Ct.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,r=t+(e?0:1),i=e?1:0;return function(t){return((r*Ce(0,.99999999,t)|0)+i)*n}}},V.ease=Ve["quad.out"],Pt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return St+=t+","+t+"Params,"}));var rn=function(t,e){this.id=Q++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:zt,this.set=e?e.getSetter:_n},sn=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,De(this,+t.duration,1,1),this.data=t.data,w||Ne.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,De(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(We(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(se(this,t),!n._dp||n.parent||ue(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&oe(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===J||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Lt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+ee(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+ee(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?ne(this._tTime,n)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?re(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,Kt(this.totalTime(Ce(-this._delay,this._tDur,e),!0)),ie(this),this},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(We(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==J&&(this._tTime-=J)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&oe(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(ut(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?re(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(e._ts||1),e=e._dp;return n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,he(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,he(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(pe(this,t),ut(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,ut(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-J))},e.eventCallback=function(t,e,n){var r=this.vars;return arguments.length>1?(e?(r[t]=e,n&&(r[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(n){var r=nt(t)?t:Yt,i=function(){var t=e.then;e.then=null,nt(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),n(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){Oe(this)},t}();Nt(sn.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var un=function(t){function e(e,n){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=ut(e.sortChildren),C&&oe(e.parent||C,p(r),n),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&ae(p(r),e.scrollTrigger),r}f(e,t);var n=e.prototype;return n.to=function(t,e,n){return fe(0,arguments,this),this},n.from=function(t,e,n){return fe(1,arguments,this),this},n.fromTo=function(t,e,n,r){return fe(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,$t(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new pn(t,e,pe(this,n),1),this},n.call=function(t,e,n){return oe(this,pn.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,r,i,s,u){return n.duration=e,n.stagger=n.stagger||r,n.onComplete=s,n.onCompleteParams=u,n.parent=this,new pn(t,n,pe(this,i)),this},n.staggerFrom=function(t,e,n,r,i,s,u){return n.runBackwards=1,$t(n).immediateRender=ut(n.immediateRender),this.staggerTo(t,e,n,r,i,s,u)},n.staggerFromTo=function(t,e,n,r,i,s,u,o){return r.startAt=n,$t(r).immediateRender=ut(r.immediateRender),this.staggerTo(t,e,r,i,s,u,o)},n.render=function(t,e,n){var r,i,s,u,o,a,l,A,c,D,h,d,p=this._time,f=this._dirty?this.totalDuration():this._tDur,m=this._dur,g=t<=0?0:Ut(t),_=this._zTime<0!=t<0&&(this._initted||!m);if(this!==C&&g>f&&t>=0&&(g=f),g!==this._tTime||n||_){if(p!==this._time&&m&&(g+=this._time-p,t+=this._time-p),r=g,c=this._start,a=!(A=this._ts),_&&(m||(p=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(h=this._yoyo,o=m+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*o+t,e,n);if(r=Ut(g%o),g===f?(u=this._repeat,r=m):((u=~~(g/o))&&u===g/o&&(r=m,u--),r>m&&(r=m)),D=ne(this._tTime,o),!p&&this._tTime&&D!==u&&(D=u),h&&1&u&&(r=m-r,d=1),u!==D&&!this._lock){var v=h&&1&D,y=v===(h&&1&u);if(u<D&&(v=!v),p=v?0:m,this._lock=1,this.render(p||(d?0:Ut(u*o)),e,!m)._lock=0,this._tTime=g,!e&&this.parent&&Se(this,"onRepeat"),this.vars.repeatRefresh&&!d&&(this.invalidate()._lock=1),p&&p!==this._time||a!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(m=this._dur,f=this._tDur,y&&(this._lock=2,p=v?m:-1e-4,this.render(p,!0),this.vars.repeatRefresh&&!d&&this.invalidate()),this._lock=0,!this._ts&&!a)return this;Qe(this,d)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,n){var r;if(n>e)for(r=t._first;r&&r._start<=n;){if(!r._dur&&"isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=n;){if(!r._dur&&"isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,Ut(p),Ut(r)),l&&(g-=r-(r=l._start))),this._tTime=g,this._time=r,this._act=!A,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,p=0),!p&&r&&!e&&(Se(this,"onStart"),this._tTime!==g))return this;if(r>=p&&t>=0)for(i=this._first;i;){if(s=i._next,(i._act||r>=i._start)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!a){l=0,s&&(g+=this._zTime=-1e-8);break}}i=s}else{i=this._last;for(var b=t<0?t:r;i;){if(s=i._prev,(i._act||b<=i._end)&&i._ts&&l!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(b-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(b-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!a){l=0,s&&(g+=this._zTime=b?-1e-8:J);break}}i=s}}if(l&&!e&&(this.pause(),l.render(r>=p?0:-1e-8)._zTime=r>=p?1:-1,this._ts))return this._start=c,ie(this),this.render(t,e,n);this._onUpdate&&!e&&Se(this,"onUpdate",!0),(g===f&&f>=this.totalDuration()||!g&&p)&&(c!==this._start&&Math.abs(A)===Math.abs(this._ts)||this._lock||((t||!m)&&(g===f&&this._ts>0||!g&&this._ts<0)&&Qt(this,1),e||t<0&&!p||!g&&!p&&f||(Se(this,g===f&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(g<f&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(rt(e)||(e=pe(this,e,t)),!(t instanceof sn)){if(At(t))return t.forEach((function(t){return n.add(t,e)})),this;if(et(t))return this.addLabel(t,e);if(!nt(t))return this;t=pn.delayedCall(0,t)}return this!==t?oe(this,t,e):this},n.getChildren=function(t,e,n,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=-X);for(var i=[],s=this._first;s;)s._start>=r&&(s instanceof pn?e&&i.push(s):(n&&i.push(s),t&&i.push.apply(i,s.getChildren(!0,e,n)))),s=s._next;return i},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return et(t)?this.removeLabel(t):nt(t)?this.killTweensOf(t):(Ht(this,t),t===this._recent&&(this._recent=this._last),Zt(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ut(Ne.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=pe(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var r=pn.delayedCall(0,e||Ft,n);return r.data="isPause",this._hasPause=1,oe(this,r,pe(this,t))},n.removePause=function(t){var e=this._first;for(t=pe(this,t);e;)e._start===t&&"isPause"===e.data&&Qt(e),e=e._next},n.killTweensOf=function(t,e,n){for(var r=this.getTweensOf(t,n),i=r.length;i--;)on!==r[i]&&r[i].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,r=[],i=ye(t),s=this._first,u=rt(e);s;)s instanceof pn?jt(s._targets,i)&&(u?(!on||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&r.push(s):(n=s.getTweensOf(i,e)).length&&r.push.apply(r,n),s=s._next;return r},n.tweenTo=function(t,e){e=e||{};var n,r=this,i=pe(r,t),s=e,u=s.startAt,o=s.onStart,a=s.onStartParams,l=s.immediateRender,A=pn.to(r,Nt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(u&&"time"in u?u.time:r._time))/r.timeScale())||J,onStart:function(){if(r.pause(),!n){var t=e.duration||Math.abs((i-(u&&"time"in u?u.time:r._time))/r.timeScale());A._dur!==t&&De(A,t,0,1).render(A._time,!0,!0),n=1}o&&o.apply(A,a||[])}},e));return l?A.render(0):A},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,Nt({startAt:{time:pe(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),Me(this,pe(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),Me(this,pe(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+J)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var r,i=this._first,s=this.labels;i;)i._start>=n&&(i._start+=t,i._end+=t),i=i._next;if(e)for(r in s)s[r]>=n&&(s[r]+=t);return Zt(this)},n.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Zt(this)},n.totalDuration=function(t){var e,n,r,i=0,s=this,u=s._last,o=X;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(r=s.parent;u;)e=u._prev,u._dirty&&u.totalDuration(),(n=u._start)>o&&s._sort&&u._ts&&!s._lock?(s._lock=1,oe(s,u,n-u._delay,1)._lock=0):o=n,n<0&&u._ts&&(i-=n,(!r&&!s._dp||r&&r.smoothChildTiming)&&(s._start+=n/s._ts,s._time-=n,s._tTime-=n),s.shiftChildren(-n,!1,-Infinity),o=0),u._end>i&&u._ts&&(i=u._end),u=e;De(s,s===C&&s._time>i?s._time:i,1,1),s._dirty=0}return s._tDur},e.updateRoot=function(t){if(C._ts&&(Lt(C,re(t,C)),b=Ne.frame),Ne.frame>=Tt){Tt+=W.autoSleep||120;var e=C._first;if((!e||!e._ts)&&W.autoSleep&&Ne._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Ne.sleep()}}},e}(sn);Nt(un.prototype,{_lock:0,_hasPause:0,_forcing:0});var on,an=function(t,e,n,r,i,s,u){var o,a,l,A,c,D,h,d,p=new kn(this._pt,t,e,0,1,bn,null,i),f=0,m=0;for(p.b=n,p.e=r,n+="",(h=~(r+="").indexOf("random("))&&(r=ke(r)),s&&(s(d=[n,r],t,e),n=d[0],r=d[1]),a=n.match(dt)||[];o=dt.exec(r);)A=o[0],c=r.substring(f,o.index),l?l=(l+1)%5:"rgba("===c.substr(-5)&&(l=1),A!==a[m++]&&(D=parseFloat(a[m-1])||0,p._pt={_next:p._pt,p:c||1===m?c:",",s:D,c:"="===A.charAt(1)?parseFloat(A.substr(2))*("-"===A.charAt(0)?-1:1):parseFloat(A)-D,m:l&&l<4?Math.round:0},f=dt.lastIndex);return p.c=f<r.length?r.substring(f,r.length):"",p.fp=u,(pt.test(r)||h)&&(p.e=0),this._pt=p,p},ln=function(t,e,n,r,i,s,u,o,a){nt(r)&&(r=r(i||0,t,s));var l,A=t[e],c="get"!==n?n:nt(A)?a?t[e.indexOf("set")||!nt(t["get"+e.substr(3)])?e:"get"+e.substr(3)](a):t[e]():A,D=nt(A)?a?Cn:mn:fn;if(et(r)&&(~r.indexOf("random(")&&(r=ke(r)),"="===r.charAt(1)&&((l=parseFloat(c)+parseFloat(r.substr(2))*("-"===r.charAt(0)?-1:1)+(ge(c)||0))||0===l)&&(r=l)),c!==r)return isNaN(c*r)||""===r?(!A&&!(e in t)&&vt(e,r),an.call(this,t,e,c,r,D,o||W.stringFilter,a)):(l=new kn(this._pt,t,e,+c||0,r-(c||0),"boolean"==typeof A?yn:vn,0,D),a&&(l.fp=a),u&&l.modifier(u,this,t),this._pt=l)},An=function(t,e,n,r,i,s){var u,o,a,l;if(Bt[t]&&!1!==(u=new Bt[t]).init(i,u.rawVars?e[t]:function(t,e,n,r,i){if(nt(t)&&(t=Dn(t,i,e,n,r)),!st(t)||t.style&&t.nodeType||At(t)||lt(t))return et(t)?Dn(t,i,e,n,r):t;var s,u={};for(s in t)u[s]=Dn(t[s],i,e,n,r);return u}(e[t],r,i,s,n),n,r,s)&&(n._pt=o=new kn(n._pt,i,t,0,1,u.render,u,0,u.priority),n!==F))for(a=n._ptLookup[n._targets.indexOf(i)],l=u._props.length;l--;)a[u._props[l]]=o;return u},cn=function t(e,n){var r,i,s,u,o,a,l,A,c,D,h,d,p,f=e.vars,g=f.ease,_=f.startAt,v=f.immediateRender,y=f.lazy,b=f.onUpdate,F=f.onUpdateParams,w=f.callbackScope,x=f.runBackwards,E=f.yoyoEase,B=f.keyframes,k=f.autoRevert,T=e._dur,M=e._startAt,S=e._targets,O=e.parent,I=O&&"nested"===O.data?O.parent._targets:S,z="auto"===e._overwrite&&!m,P=e.timeline;if(P&&(!B||!g)&&(g="none"),e._ease=Ze(g,V.ease),e._yEase=E?He(Ze(!0===E?g:E,V.ease)):0,E&&e._yoyo&&!e._repeat&&(E=e._yEase,e._yEase=e._ease,e._ease=E),e._from=!P&&!!f.runBackwards,!P){if(d=(A=S[0]?It(S[0]).harness:0)&&f[A.prop],r=Jt(f,wt),M&&M.render(-1,!0).kill(),_)if(Qt(e._startAt=pn.set(S,Nt({data:"isStart",overwrite:!1,parent:O,immediateRender:!0,lazy:ut(y),startAt:null,delay:0,onUpdate:b,onUpdateParams:F,callbackScope:w,stagger:0},_))),n<0&&!v&&!k&&e._startAt.render(-1,!0),v){if(n>0&&!k&&(e._startAt=0),T&&n<=0)return void(n&&(e._zTime=n))}else!1===k&&(e._startAt=0);else if(x&&T)if(M)!k&&(e._startAt=0);else if(n&&(v=!1),s=Nt({overwrite:!1,data:"isFromStart",lazy:v&&ut(y),immediateRender:v,stagger:0,parent:O},r),d&&(s[A.prop]=d),Qt(e._startAt=pn.set(S,s)),n<0&&e._startAt.render(-1,!0),v){if(!n)return}else t(e._startAt,J);for(e._pt=0,y=T&&ut(y)||y&&!T,i=0;i<S.length;i++){if(l=(o=S[i])._gsap||Ot(S)[i]._gsap,e._ptLookup[i]=D={},Et[l.id]&&xt.length&&qt(),h=I===S?i:I.indexOf(o),A&&!1!==(c=new A).init(o,d||r,e,h,I)&&(e._pt=u=new kn(e._pt,o,c.name,0,1,c.render,c,0,c.priority),c._props.forEach((function(t){D[t]=u})),c.priority&&(a=1)),!A||d)for(s in r)Bt[s]&&(c=An(s,r,e,h,o,I))?c.priority&&(a=1):D[s]=u=ln.call(e,o,s,"get",r[s],h,I,0,f.stringFilter);e._op&&e._op[i]&&e.kill(o,e._op[i]),z&&e._pt&&(on=e,C.killTweensOf(o,D,e.globalTime(n)),p=!e.parent,on=0),e._pt&&y&&(Et[l.id]=1)}a&&Bn(e),e._onInit&&e._onInit(e)}e._onUpdate=b,e._initted=(!e._op||e._pt)&&!p},Dn=function(t,e,n,r,i){return nt(t)?t.call(e,n,r,i):et(t)&&~t.indexOf("random(")?ke(t):t},hn=St+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",dn=(hn+",id,stagger,delay,duration,paused,scrollTrigger").split(","),pn=function(t){function e(e,n,r,i){var s;"number"==typeof n&&(r.duration=n,n=r,r=null);var u,o,a,l,A,c,D,h,d=(s=t.call(this,i?n:$t(n))||this).vars,f=d.duration,g=d.delay,_=d.immediateRender,v=d.stagger,y=d.overwrite,b=d.keyframes,F=d.defaults,w=d.scrollTrigger,x=d.yoyoEase,E=n.parent||C,B=(At(e)||lt(e)?rt(e[0]):"length"in n)?[e]:ye(e);if(s._targets=B.length?Ot(B):yt("GSAP target "+e+" not found. https://greensock.com",!W.nullTargetWarn)||[],s._ptLookup=[],s._overwrite=y,b||v||at(f)||at(g)){if(n=s.vars,(u=s.timeline=new un({data:"nested",defaults:F||{}})).kill(),u.parent=u._dp=p(s),u._start=0,b)$t(Nt(u.vars.defaults,{ease:"none"})),v?B.forEach((function(t,e){return b.forEach((function(n,r){return u.to(t,n,r?">":e*v)}))})):b.forEach((function(t){return u.to(B,t,">")}));else{if(l=B.length,D=v?Fe(v):Ft,st(v))for(A in v)~hn.indexOf(A)&&(h||(h={}),h[A]=v[A]);for(o=0;o<l;o++){for(A in a={},n)dn.indexOf(A)<0&&(a[A]=n[A]);a.stagger=0,x&&(a.yoyoEase=x),h&&Vt(a,h),c=B[o],a.duration=+Dn(f,p(s),o,c,B),a.delay=(+Dn(g,p(s),o,c,B)||0)-s._delay,!v&&1===l&&a.delay&&(s._delay=g=a.delay,s._start+=g,a.delay=0),u.to(c,a,D(o,c,B))}u.duration()?f=g=0:s.timeline=0}f||s.duration(f=u.duration())}else s.timeline=0;return!0!==y||m||(on=p(s),C.killTweensOf(B),on=0),oe(E,p(s),r),n.reversed&&s.reverse(),n.paused&&s.paused(!0),(_||!f&&!b&&s._start===Ut(E._time)&&ut(_)&&te(p(s))&&"nested"!==E.data)&&(s._tTime=-1e-8,s.render(Math.max(0,-g))),w&&ae(p(s),w),s}f(e,t);var n=e.prototype;return n.render=function(t,e,n){var r,i,s,u,o,a,l,A,c,D=this._time,h=this._tDur,d=this._dur,p=t>h-J&&t>=0?h:t<J?0:t;if(d){if(p!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(r=p,A=this.timeline,this._repeat){if(u=d+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*u+t,e,n);if(r=Ut(p%u),p===h?(s=this._repeat,r=d):((s=~~(p/u))&&s===p/u&&(r=d,s--),r>d&&(r=d)),(a=this._yoyo&&1&s)&&(c=this._yEase,r=d-r),o=ne(this._tTime,u),r===D&&!n&&this._initted)return this;s!==o&&(A&&this._yEase&&Qe(A,a),!this.vars.repeatRefresh||a||this._lock||(this._lock=n=1,this.render(Ut(u*s),!0).invalidate()._lock=0))}if(!this._initted){if(le(this,t<0?t:r,n,e))return this._tTime=0,this;if(d!==this._dur)return this.render(t,e,n)}if(this._tTime=p,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=l=(c||this._ease)(r/d),this._from&&(this.ratio=l=1-l),r&&!D&&!e&&(Se(this,"onStart"),this._tTime!==p))return this;for(i=this._pt;i;)i.r(l,i.d),i=i._next;A&&A.render(t<0?t:!r&&a?-1e-8:A._dur*l,e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,n),Se(this,"onUpdate")),this._repeat&&s!==o&&this.vars.onRepeat&&!e&&this.parent&&Se(this,"onRepeat"),p!==this._tDur&&p||this._tTime!==p||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!d)&&(p===this._tDur&&this._ts>0||!p&&this._ts<0)&&Qt(this,1),e||t<0&&!D||!p&&!D||(Se(this,p===h?"onComplete":"onReverseComplete",!0),this._prom&&!(p<h&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,r){var i,s,u,o=t.ratio,a=e<0||!e&&(!t._start&&Ae(t)&&(t._initted||!ce(t))||(t._ts<0||t._dp._ts<0)&&!ce(t))?0:1,l=t._rDelay,A=0;if(l&&t._repeat&&(A=Ce(0,t._tDur,e),s=ne(A,l),u=ne(t._tTime,l),t._yoyo&&1&s&&(a=1-a),s!==u&&(o=1-a,t.vars.repeatRefresh&&t._initted&&t.invalidate())),a!==o||r||t._zTime===J||!e&&t._zTime){if(!t._initted&&le(t,e,r,n))return;for(u=t._zTime,t._zTime=e||(n?J:0),n||(n=e&&!u),t.ratio=a,t._from&&(a=1-a),t._time=0,t._tTime=A,i=t._pt;i;)i.r(a,i.d),i=i._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!n&&Se(t,"onUpdate"),A&&t._repeat&&!n&&t.parent&&Se(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===a&&(a&&Qt(t,1),n||(Se(t,a?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Oe(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,on&&!0!==on.vars.overwrite)._first||Oe(this),this.parent&&n!==this.timeline.totalDuration()&&De(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,s,u,o,a,l,A=this._targets,c=t?ye(t):A,D=this._ptLookup,h=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,r=n===e.length;r&&n--&&t[n]===e[n];);return n<0}(A,c))return"all"===e&&(this._pt=0),Oe(this);for(r=this._op=this._op||[],"all"!==e&&(et(e)&&(o={},Pt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var n,r,i,s,u=t[0]?It(t[0]).harness:0,o=u&&u.aliases;if(!o)return e;for(r in n=Vt({},e),o)if(r in n)for(i=(s=o[r].split(",")).length;i--;)n[s[i]]=n[r];return n}(A,e)),l=A.length;l--;)if(~c.indexOf(A[l]))for(o in i=D[l],"all"===e?(r[l]=e,u=i,s={}):(s=r[l]=r[l]||{},u=e),u)(a=i&&i[o])&&("kill"in a.d&&!0!==a.d.kill(o)||Ht(this,a,"_pt"),delete i[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&h&&Oe(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return fe(1,arguments)},e.delayedCall=function(t,n,r,i){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},e.fromTo=function(t,e,n){return fe(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return C.killTweensOf(t,e,n)},e}(sn);Nt(pn.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Pt("staggerTo,staggerFrom,staggerFromTo",(function(t){pn[t]=function(){var e=new un,n=_e.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var fn=function(t,e,n){return t[e]=n},mn=function(t,e,n){return t[e](n)},Cn=function(t,e,n,r){return t[e](r.fp,n)},gn=function(t,e,n){return t.setAttribute(e,n)},_n=function(t,e){return nt(t[e])?mn:it(t[e])&&t.setAttribute?gn:fn},vn=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},yn=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},bn=function(t,e){var n=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+r,n=n._next;r+=e.c}e.set(e.t,e.p,r,e)},Fn=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},wn=function(t,e,n,r){for(var i,s=this._pt;s;)i=s._next,s.p===r&&s.modifier(t,e,n),s=i},xn=function(t){for(var e,n,r=this._pt;r;)n=r._next,r.p===t&&!r.op||r.op===t?Ht(this,r,"_pt"):r.dep||(e=1),r=n;return!e},En=function(t,e,n,r){r.mSet(t,e,r.m.call(r.tween,n,r.mt),r)},Bn=function(t){for(var e,n,r,i,s=t._pt;s;){for(e=s._next,n=r;n&&n.pr>s.pr;)n=n._next;(s._prev=n?n._prev:i)?s._prev._next=s:r=s,(s._next=n)?n._prev=s:i=s,s=e}t._pt=r},kn=function(){function t(t,e,n,r,i,s,u,o,a){this.t=e,this.s=r,this.c=i,this.p=n,this.r=s||vn,this.d=u||this,this.set=o||fn,this.pr=a||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=En,this.m=t,this.mt=n,this.tween=e},t}();Pt(St+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return wt[t]=1})),Ct.TweenMax=Ct.TweenLite=pn,Ct.TimelineLite=Ct.TimelineMax=un,C=new un({sortChildren:!1,defaults:V,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),W.stringFilter=Ye;var Tn={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return Ie(t)}))},timeline:function(t){return new un(t)},getTweensOf:function(t,e){return C.getTweensOf(t,e)},getProperty:function(t,e,n,r){et(t)&&(t=ye(t)[0]);var i=It(t||{}).get,s=n?Yt:Gt;return"native"===n&&(n=""),t?e?s((Bt[e]&&Bt[e].get||i)(t,e,n,r)):function(e,n,r){return s((Bt[e]&&Bt[e].get||i)(t,e,n,r))}:t},quickSetter:function(t,e,n){if((t=ye(t)).length>1){var r=t.map((function(t){return On.quickSetter(t,e,n)})),i=r.length;return function(t){for(var e=i;e--;)r[e](t)}}t=t[0]||{};var s=Bt[e],u=It(t),o=u.harness&&(u.harness.aliases||{})[e]||e,a=s?function(e){var r=new s;F._pt=0,r.init(t,n?e+n:e,F,0,[t]),r.render(1,r),F._pt&&Fn(1,F)}:u.set(t,o);return s?a:function(e){return a(t,o,n?e+n:e,u,1)}},isTweening:function(t){return C.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ze(t.ease,V.ease)),Xt(V,t||{})},config:function(t){return Xt(W,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,r=t.plugins,i=t.defaults,s=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!Bt[t]&&!Ct[t]&&yt(e+" effect requires "+t+" plugin.")})),kt[e]=function(t,e,r){return n(ye(t),Nt(e||{},i),r)},s&&(un.prototype[e]=function(t,n,r){return this.add(kt[e](t,st(n)?n:(r=n)&&{},this),r)})},registerEase:function(t,e){Ve[t]=Ze(e)},parseEase:function(t,e){return arguments.length?Ze(t,e):Ve},getById:function(t){return C.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,r,i=new un(t);for(i.smoothChildTiming=ut(t.smoothChildTiming),C.remove(i),i._dp=0,i._time=i._tTime=C._time,n=C._first;n;)r=n._next,!e&&!n._dur&&n instanceof pn&&n.vars.onComplete===n._targets[0]||oe(i,n,n._start-n._delay),n=r;return oe(C,i,0),i},utils:{wrap:function t(e,n,r){var i=n-e;return At(e)?Be(e,t(0,e.length),n):me(r,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,n,r){var i=n-e,s=2*i;return At(e)?Be(e,t(0,e.length-1),n):me(r,(function(t){return e+((t=(s+(t-e)%s)%s||0)>i?s-t:t)}))},distribute:Fe,random:Ee,snap:xe,normalize:function(t,e,n){return Te(t,e,0,1,n)},getUnit:ge,clamp:function(t,e,n){return me(n,(function(n){return Ce(t,e,n)}))},splitColor:Ue,toArray:ye,selector:function(t){return t=ye(t)[0]||yt("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return ye(e,n.querySelectorAll?n:n===t?yt("Invalid scope")||v.createElement("div"):t)}},mapRange:Te,pipe:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(n){return t(parseFloat(n))+(e||ge(n))}},interpolate:function t(e,n,r,i){var s=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!s){var u,o,a,l,A,c=et(e),D={};if(!0===r&&(i=1)&&(r=null),c)e={p:e},n={p:n};else if(At(e)&&!At(n)){for(a=[],l=e.length,A=l-2,o=1;o<l;o++)a.push(t(e[o-1],e[o]));l--,s=function(t){t*=l;var e=Math.min(A,~~t);return a[e](t-e)},r=n}else i||(e=Vt(At(e)?[]:{},e));if(!a){for(u in n)ln.call(D,e,u,"get",n[u]);s=function(t){return Fn(t,D)||(c?e.p:e)}}}return me(r,s)},shuffle:be},install:_t,effects:kt,ticker:Ne,updateRoot:un.updateRoot,plugins:Bt,globalTimeline:C,core:{PropTween:kn,globals:bt,Tween:pn,Timeline:un,Animation:sn,getCache:It,_removeLinkedListItem:Ht,suppressOverwrites:function(t){return m=t}}};Pt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Tn[t]=pn[t]})),Ne.add(un.updateRoot),F=Tn.to({},{duration:0});var Mn=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},Sn=function(t,e){return{name:t,rawVars:1,init:function(t,n,r){r._onInit=function(t){var r,i;if(et(n)&&(r={},Pt(n,(function(t){return r[t]=1})),n=r),e){for(i in r={},n)r[i]=e(n[i]);n=r}!function(t,e){var n,r,i,s=t._targets;for(n in e)for(r=s.length;r--;)(i=t._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Mn(i,n)),i&&i.modifier&&i.modifier(e[n],t,s[r],n))}(t,n)}}}},On=Tn.registerPlugin({name:"attr",init:function(t,e,n,r,i){var s,u;for(s in e)(u=this.add(t,"setAttribute",(t.getAttribute(s)||0)+"",e[s],r,i,0,0,s))&&(u.op=s),this._props.push(s)}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n])}},Sn("roundProps",we),Sn("modifiers"),Sn("snap",xe))||Tn;pn.version=un.version=On.version="3.8.0",y=1,ot()&&We(),Ve.Power0,Ve.Power1,Ve.Power2,Ve.Power3,Ve.Power4,Ve.Linear,Ve.Quad,Ve.Cubic,Ve.Quart,Ve.Quint,Ve.Strong,Ve.Elastic,Ve.Back,Ve.SteppedEase,Ve.Bounce,Ve.Sine,Ve.Expo,Ve.Circ;var In,zn,Pn,Rn,Un,jn,qn,Ln={},Gn=180/Math.PI,Yn=Math.PI/180,Nn=Math.atan2,Wn=/([A-Z])/g,Vn=/(?:left|right|width|margin|padding|x)/i,Xn=/[\s,\(]\S/,Jn={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},$n=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Hn=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Qn=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Zn=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},Kn=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},tr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},er=function(t,e,n){return t.style[e]=n},nr=function(t,e,n){return t.style.setProperty(e,n)},rr=function(t,e,n){return t._gsap[e]=n},ir=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},sr=function(t,e,n,r,i){var s=t._gsap;s.scaleX=s.scaleY=n,s.renderTransform(i,s)},ur=function(t,e,n,r,i){var s=t._gsap;s[e]=n,s.renderTransform(i,s)},or="transform",ar=or+"Origin",lr=function(t,e){var n=zn.createElementNS?zn.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):zn.createElement(t);return n.style?n:zn.createElement(t)},Ar=function t(e,n,r){var i=getComputedStyle(e);return i[n]||i.getPropertyValue(n.replace(Wn,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&t(e,Dr(n)||n,1)||""},cr="O,Moz,ms,Ms,Webkit".split(","),Dr=function(t,e,n){var r=(e||Un).style,i=5;if(t in r&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(cr[i]+t in r););return i<0?null:(3===i?"ms":i>=0?cr[i]:"")+t},hr=function(){"undefined"!=typeof window&&window.document&&(In=window,zn=In.document,Pn=zn.documentElement,Un=lr("div")||{style:{}},lr("div"),or=Dr(or),ar=or+"Origin",Un.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",qn=!!Dr("perspective"),Rn=1)},dr=function t(e){var n,r=lr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,s=this.nextSibling,u=this.style.cssText;if(Pn.appendChild(r),r.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(s?i.insertBefore(this,s):i.appendChild(this)),Pn.removeChild(r),this.style.cssText=u,n},pr=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},fr=function(t){var e;try{e=t.getBBox()}catch(n){e=dr.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===dr||(e=dr.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+pr(t,["x","cx","x1"])||0,y:+pr(t,["y","cy","y1"])||0,width:0,height:0}},mr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!fr(t))},Cr=function(t,e){if(e){var n=t.style;e in Ln&&e!==ar&&(e=or),n.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),n.removeProperty(e.replace(Wn,"-$1").toLowerCase())):n.removeAttribute(e)}},gr=function(t,e,n,r,i,s){var u=new kn(t._pt,e,n,0,1,s?tr:Kn);return t._pt=u,u.b=r,u.e=i,t._props.push(n),u},_r={deg:1,rad:1,turn:1},vr=function t(e,n,r,i){var s,u,o,a,l=parseFloat(r)||0,A=(r+"").trim().substr((l+"").length)||"px",c=Un.style,D=Vn.test(n),h="svg"===e.tagName.toLowerCase(),d=(h?"client":"offset")+(D?"Width":"Height"),p=100,f="px"===i,m="%"===i;return i===A||!l||_r[i]||_r[A]?l:("px"!==A&&!f&&(l=t(e,n,r,"px")),a=e.getCTM&&mr(e),!m&&"%"!==A||!Ln[n]&&!~n.indexOf("adius")?(c[D?"width":"height"]=p+(f?A:i),u=~n.indexOf("adius")||"em"===i&&e.appendChild&&!h?e:e.parentNode,a&&(u=(e.ownerSVGElement||{}).parentNode),u&&u!==zn&&u.appendChild||(u=zn.body),(o=u._gsap)&&m&&o.width&&D&&o.time===Ne.time?Rt(l/o.width*p):((m||"%"===A)&&(c.position=Ar(e,"position")),u===e&&(c.position="static"),u.appendChild(Un),s=Un[d],u.removeChild(Un),c.position="absolute",D&&m&&((o=It(u)).time=Ne.time,o.width=u[d]),Rt(f?s*l/p:s&&l?p/s*l:0))):(s=a?e.getBBox()[D?"width":"height"]:e[d],Rt(m?l/s*p:l/100*s)))},yr=function(t,e,n,r){var i;return Rn||hr(),e in Jn&&"transform"!==e&&~(e=Jn[e]).indexOf(",")&&(e=e.split(",")[0]),Ln[e]&&"transform"!==e?(i=Or(t,r),i="transformOrigin"!==e?i[e]:i.svg?i.origin:Ir(Ar(t,ar))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=xr[e]&&xr[e](t,e,n)||Ar(t,e)||zt(t,e)||("opacity"===e?1:0)),n&&!~(i+"").trim().indexOf(" ")?vr(t,e,i,n)+n:i},br=function(t,e,n,r){if(!n||"none"===n){var i=Dr(e,t,1),s=i&&Ar(t,i,1);s&&s!==n?(e=i,n=s):"borderColor"===e&&(n=Ar(t,"borderTopColor"))}var u,o,a,l,A,c,D,h,d,p,f,m,C=new kn(this._pt,t.style,e,0,1,bn),g=0,_=0;if(C.b=n,C.e=r,n+="","auto"==(r+="")&&(t.style[e]=r,r=Ar(t,e)||r,t.style[e]=n),Ye(u=[n,r]),r=u[1],a=(n=u[0]).match(ht)||[],(r.match(ht)||[]).length){for(;o=ht.exec(r);)D=o[0],d=r.substring(g,o.index),A?A=(A+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(A=1),D!==(c=a[_++]||"")&&(l=parseFloat(c)||0,f=c.substr((l+"").length),(m="="===D.charAt(1)?+(D.charAt(0)+"1"):0)&&(D=D.substr(2)),h=parseFloat(D),p=D.substr((h+"").length),g=ht.lastIndex-p.length,p||(p=p||W.units[e]||f,g===r.length&&(r+=p,C.e+=p)),f!==p&&(l=vr(t,e,c,p)||0),C._pt={_next:C._pt,p:d||1===_?d:",",s:l,c:m?m*h:h-l,m:A&&A<4||"zIndex"===e?Math.round:0});C.c=g<r.length?r.substring(g,r.length):""}else C.r="display"===e&&"none"===r?tr:Kn;return pt.test(r)&&(C.e=0),this._pt=C,C},Fr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},wr=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,r,i,s=e.t,u=s.style,o=e.u,a=s._gsap;if("all"===o||!0===o)u.cssText="",r=1;else for(i=(o=o.split(",")).length;--i>-1;)n=o[i],Ln[n]&&(r=1,n="transformOrigin"===n?ar:or),Cr(s,n);r&&(Cr(s,or),a&&(a.svg&&s.removeAttribute("transform"),Or(s,1),a.uncache=1))}},xr={clearProps:function(t,e,n,r,i){if("isFromStart"!==i.data){var s=t._pt=new kn(t._pt,e,n,0,0,wr);return s.u=r,s.pr=-10,s.tween=i,t._props.push(n),1}}},Er=[1,0,0,1,0,0],Br={},kr=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},Tr=function(t){var e=Ar(t,or);return kr(e)?Er:e.substr(7).match(Dt).map(Rt)},Mr=function(t,e){var n,r,i,s,u=t._gsap||It(t),o=t.style,a=Tr(t);return u.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(a=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?Er:a:(a!==Er||t.offsetParent||t===Pn||u.svg||(i=o.display,o.display="block",(n=t.parentNode)&&t.offsetParent||(s=1,r=t.nextSibling,Pn.appendChild(t)),a=Tr(t),i?o.display=i:Cr(t,"display"),s&&(r?n.insertBefore(t,r):n?n.appendChild(t):Pn.removeChild(t))),e&&a.length>6?[a[0],a[1],a[4],a[5],a[12],a[13]]:a)},Sr=function(t,e,n,r,i,s){var u,o,a,l=t._gsap,A=i||Mr(t,!0),c=l.xOrigin||0,D=l.yOrigin||0,h=l.xOffset||0,d=l.yOffset||0,p=A[0],f=A[1],m=A[2],C=A[3],g=A[4],_=A[5],v=e.split(" "),y=parseFloat(v[0])||0,b=parseFloat(v[1])||0;n?A!==Er&&(o=p*C-f*m)&&(a=y*(-f/o)+b*(p/o)-(p*_-f*g)/o,y=y*(C/o)+b*(-m/o)+(m*_-C*g)/o,b=a):(y=(u=fr(t)).x+(~v[0].indexOf("%")?y/100*u.width:y),b=u.y+(~(v[1]||v[0]).indexOf("%")?b/100*u.height:b)),r||!1!==r&&l.smooth?(g=y-c,_=b-D,l.xOffset=h+(g*p+_*m)-g,l.yOffset=d+(g*f+_*C)-_):l.xOffset=l.yOffset=0,l.xOrigin=y,l.yOrigin=b,l.smooth=!!r,l.origin=e,l.originIsAbsolute=!!n,t.style[ar]="0px 0px",s&&(gr(s,l,"xOrigin",c,y),gr(s,l,"yOrigin",D,b),gr(s,l,"xOffset",h,l.xOffset),gr(s,l,"yOffset",d,l.yOffset)),t.setAttribute("data-svg-origin",y+" "+b)},Or=function(t,e){var n=t._gsap||new rn(t);if("x"in n&&!e&&!n.uncache)return n;var r,i,s,u,o,a,l,A,c,D,h,d,p,f,m,C,g,_,v,y,b,F,w,x,E,B,k,T,M,S,O,I,z=t.style,P=n.scaleX<0,R="px",U="deg",j=Ar(t,ar)||"0";return r=i=s=a=l=A=c=D=h=0,u=o=1,n.svg=!(!t.getCTM||!mr(t)),f=Mr(t,n.svg),n.svg&&(x=(!n.uncache||"0px 0px"===j)&&!e&&t.getAttribute("data-svg-origin"),Sr(t,x||j,!!x||n.originIsAbsolute,!1!==n.smooth,f)),d=n.xOrigin||0,p=n.yOrigin||0,f!==Er&&(_=f[0],v=f[1],y=f[2],b=f[3],r=F=f[4],i=w=f[5],6===f.length?(u=Math.sqrt(_*_+v*v),o=Math.sqrt(b*b+y*y),a=_||v?Nn(v,_)*Gn:0,(c=y||b?Nn(y,b)*Gn+a:0)&&(o*=Math.abs(Math.cos(c*Yn))),n.svg&&(r-=d-(d*_+p*y),i-=p-(d*v+p*b))):(I=f[6],S=f[7],k=f[8],T=f[9],M=f[10],O=f[11],r=f[12],i=f[13],s=f[14],l=(m=Nn(I,M))*Gn,m&&(x=F*(C=Math.cos(-m))+k*(g=Math.sin(-m)),E=w*C+T*g,B=I*C+M*g,k=F*-g+k*C,T=w*-g+T*C,M=I*-g+M*C,O=S*-g+O*C,F=x,w=E,I=B),A=(m=Nn(-y,M))*Gn,m&&(C=Math.cos(-m),O=b*(g=Math.sin(-m))+O*C,_=x=_*C-k*g,v=E=v*C-T*g,y=B=y*C-M*g),a=(m=Nn(v,_))*Gn,m&&(x=_*(C=Math.cos(m))+v*(g=Math.sin(m)),E=F*C+w*g,v=v*C-_*g,w=w*C-F*g,_=x,F=E),l&&Math.abs(l)+Math.abs(a)>359.9&&(l=a=0,A=180-A),u=Rt(Math.sqrt(_*_+v*v+y*y)),o=Rt(Math.sqrt(w*w+I*I)),m=Nn(F,w),c=Math.abs(m)>2e-4?m*Gn:0,h=O?1/(O<0?-O:O):0),n.svg&&(x=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!kr(Ar(t,or)),x&&t.setAttribute("transform",x))),Math.abs(c)>90&&Math.abs(c)<270&&(P?(u*=-1,c+=a<=0?180:-180,a+=a<=0?180:-180):(o*=-1,c+=c<=0?180:-180)),n.x=r-((n.xPercent=r&&(n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+R,n.y=i-((n.yPercent=i&&(n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+R,n.z=s+R,n.scaleX=Rt(u),n.scaleY=Rt(o),n.rotation=Rt(a)+U,n.rotationX=Rt(l)+U,n.rotationY=Rt(A)+U,n.skewX=c+U,n.skewY=D+U,n.transformPerspective=h+R,(n.zOrigin=parseFloat(j.split(" ")[2])||0)&&(z[ar]=Ir(j)),n.xOffset=n.yOffset=0,n.force3D=W.force3D,n.renderTransform=n.svg?Lr:qn?qr:Pr,n.uncache=0,n},Ir=function(t){return(t=t.split(" "))[0]+" "+t[1]},zr=function(t,e,n){var r=ge(e);return Rt(parseFloat(e)+parseFloat(vr(t,"x",n+"px",r)))+r},Pr=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,qr(t,e)},Rr="0deg",Ur="0px",jr=") ",qr=function(t,e){var n=e||this,r=n.xPercent,i=n.yPercent,s=n.x,u=n.y,o=n.z,a=n.rotation,l=n.rotationY,A=n.rotationX,c=n.skewX,D=n.skewY,h=n.scaleX,d=n.scaleY,p=n.transformPerspective,f=n.force3D,m=n.target,C=n.zOrigin,g="",_="auto"===f&&t&&1!==t||!0===f;if(C&&(A!==Rr||l!==Rr)){var v,y=parseFloat(l)*Yn,b=Math.sin(y),F=Math.cos(y);y=parseFloat(A)*Yn,v=Math.cos(y),s=zr(m,s,b*v*-C),u=zr(m,u,-Math.sin(y)*-C),o=zr(m,o,F*v*-C+C)}p!==Ur&&(g+="perspective("+p+jr),(r||i)&&(g+="translate("+r+"%, "+i+"%) "),(_||s!==Ur||u!==Ur||o!==Ur)&&(g+=o!==Ur||_?"translate3d("+s+", "+u+", "+o+") ":"translate("+s+", "+u+jr),a!==Rr&&(g+="rotate("+a+jr),l!==Rr&&(g+="rotateY("+l+jr),A!==Rr&&(g+="rotateX("+A+jr),c===Rr&&D===Rr||(g+="skew("+c+", "+D+jr),1===h&&1===d||(g+="scale("+h+", "+d+jr),m.style[or]=g||"translate(0, 0)"},Lr=function(t,e){var n,r,i,s,u,o=e||this,a=o.xPercent,l=o.yPercent,A=o.x,c=o.y,D=o.rotation,h=o.skewX,d=o.skewY,p=o.scaleX,f=o.scaleY,m=o.target,C=o.xOrigin,g=o.yOrigin,_=o.xOffset,v=o.yOffset,y=o.forceCSS,b=parseFloat(A),F=parseFloat(c);D=parseFloat(D),h=parseFloat(h),(d=parseFloat(d))&&(h+=d=parseFloat(d),D+=d),D||h?(D*=Yn,h*=Yn,n=Math.cos(D)*p,r=Math.sin(D)*p,i=Math.sin(D-h)*-f,s=Math.cos(D-h)*f,h&&(d*=Yn,u=Math.tan(h-d),i*=u=Math.sqrt(1+u*u),s*=u,d&&(u=Math.tan(d),n*=u=Math.sqrt(1+u*u),r*=u)),n=Rt(n),r=Rt(r),i=Rt(i),s=Rt(s)):(n=p,s=f,r=i=0),(b&&!~(A+"").indexOf("px")||F&&!~(c+"").indexOf("px"))&&(b=vr(m,"x",A,"px"),F=vr(m,"y",c,"px")),(C||g||_||v)&&(b=Rt(b+C-(C*n+g*i)+_),F=Rt(F+g-(C*r+g*s)+v)),(a||l)&&(u=m.getBBox(),b=Rt(b+a/100*u.width),F=Rt(F+l/100*u.height)),u="matrix("+n+","+r+","+i+","+s+","+b+","+F+")",m.setAttribute("transform",u),y&&(m.style[or]=u)},Gr=function(t,e,n,r,i,s){var u,o,a=360,l=et(i),A=parseFloat(i)*(l&&~i.indexOf("rad")?Gn:1),c=s?A*s:A-r,D=r+c+"deg";return l&&("short"===(u=i.split("_")[1])&&(c%=a)!=c%180&&(c+=c<0?a:-360),"cw"===u&&c<0?c=(c+36e9)%a-~~(c/a)*a:"ccw"===u&&c>0&&(c=(c-36e9)%a-~~(c/a)*a)),t._pt=o=new kn(t._pt,e,n,r,c,Hn),o.e=D,o.u="deg",t._props.push(n),o},Yr=function(t,e){for(var n in e)t[n]=e[n];return t},Nr=function(t,e,n){var r,i,s,u,o,a,l,A=Yr({},n._gsap),c=n.style;for(i in A.svg?(s=n.getAttribute("transform"),n.setAttribute("transform",""),c[or]=e,r=Or(n,1),Cr(n,or),n.setAttribute("transform",s)):(s=getComputedStyle(n)[or],c[or]=e,r=Or(n,1),c[or]=s),Ln)(s=A[i])!==(u=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=ge(s)!==(l=ge(u))?vr(n,i,s,l):parseFloat(s),a=parseFloat(u),t._pt=new kn(t._pt,r,i,o,a-o,$n),t._pt.u=l||0,t._props.push(i));Yr(r,A)};Pt("padding,margin,Width,Radius",(function(t,e){var n="Top",r="Right",i="Bottom",s="Left",u=(e<3?[n,r,i,s]:[n+s,n+r,i+r,i+s]).map((function(n){return e<2?t+n:"border"+n+t}));xr[e>1?"border"+t:t]=function(t,e,n,r,i){var s,o;if(arguments.length<4)return s=u.map((function(e){return yr(t,e,n)})),5===(o=s.join(" ")).split(s[0]).length?s[0]:o;s=(r+"").split(" "),o={},u.forEach((function(t,e){return o[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,o,i)}}));var Wr,Vr,Xr={name:"css",register:hr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,r,i){var s,u,o,a,l,A,c,D,h,d,p,f,m,C,g,_,v,y,b,F=this._props,w=t.style,x=n.vars.startAt;for(c in Rn||hr(),e)if("autoRound"!==c&&(u=e[c],!Bt[c]||!An(c,e,n,r,t,i)))if(l=typeof u,A=xr[c],"function"===l&&(l=typeof(u=u.call(n,r,t,i))),"string"===l&&~u.indexOf("random(")&&(u=ke(u)),A)A(this,t,c,u,n)&&(g=1);else if("--"===c.substr(0,2))s=(getComputedStyle(t).getPropertyValue(c)+"").trim(),u+="",Le.lastIndex=0,Le.test(s)||(D=ge(s),h=ge(u)),h?D!==h&&(s=vr(t,c,s,h)+h):D&&(u+=D),this.add(w,"setProperty",s,u,r,i,0,0,c),F.push(c);else if("undefined"!==l){if(x&&c in x?(s="function"==typeof x[c]?x[c].call(n,r,t,i):x[c],c in W.units&&!ge(s)&&(s+=W.units[c]),et(s)&&~s.indexOf("random(")&&(s=ke(s)),"="===(s+"").charAt(1)&&(s=yr(t,c))):s=yr(t,c),a=parseFloat(s),(d="string"===l&&"="===u.charAt(1)?+(u.charAt(0)+"1"):0)&&(u=u.substr(2)),o=parseFloat(u),c in Jn&&("autoAlpha"===c&&(1===a&&"hidden"===yr(t,"visibility")&&o&&(a=0),gr(this,w,"visibility",a?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==c&&"transform"!==c&&~(c=Jn[c]).indexOf(",")&&(c=c.split(",")[0])),p=c in Ln)if(f||((m=t._gsap).renderTransform&&!e.parseTransform||Or(t,e.parseTransform),C=!1!==e.smoothOrigin&&m.smooth,(f=this._pt=new kn(this._pt,w,or,0,1,m.renderTransform,m,0,-1)).dep=1),"scale"===c)this._pt=new kn(this._pt,m,"scaleY",m.scaleY,(d?d*o:o-m.scaleY)||0),F.push("scaleY",c),c+="X";else{if("transformOrigin"===c){v=void 0,y=void 0,b=void 0,y=(v=(_=u).split(" "))[0],b=v[1]||"50%","top"!==y&&"bottom"!==y&&"left"!==b&&"right"!==b||(_=y,y=b,b=_),v[0]=Fr[y]||y,v[1]=Fr[b]||b,u=v.join(" "),m.svg?Sr(t,u,0,C,0,this):((h=parseFloat(u.split(" ")[2])||0)!==m.zOrigin&&gr(this,m,"zOrigin",m.zOrigin,h),gr(this,w,c,Ir(s),Ir(u)));continue}if("svgOrigin"===c){Sr(t,u,1,C,0,this);continue}if(c in Br){Gr(this,m,c,a,u,d);continue}if("smoothOrigin"===c){gr(this,m,"smooth",m.smooth,u);continue}if("force3D"===c){m[c]=u;continue}if("transform"===c){Nr(this,u,t);continue}}else c in w||(c=Dr(c)||c);if(p||(o||0===o)&&(a||0===a)&&!Xn.test(u)&&c in w)o||(o=0),(D=(s+"").substr((a+"").length))!==(h=ge(u)||(c in W.units?W.units[c]:D))&&(a=vr(t,c,s,h)),this._pt=new kn(this._pt,p?m:w,c,a,d?d*o:o-a,p||"px"!==h&&"zIndex"!==c||!1===e.autoRound?$n:Zn),this._pt.u=h||0,D!==h&&"%"!==h&&(this._pt.b=s,this._pt.r=Qn);else if(c in w)br.call(this,t,c,s,u);else{if(!(c in t)){vt(c,u);continue}this.add(t,c,s||t[c],u,r,i)}F.push(c)}g&&Bn(this)},get:yr,aliases:Jn,getSetter:function(t,e,n){var r=Jn[e];return r&&r.indexOf(",")<0&&(e=r),e in Ln&&e!==ar&&(t._gsap.x||yr(t,"x"))?n&&jn===n?"scale"===e?ir:rr:(jn=n||{})&&("scale"===e?sr:ur):t.style&&!it(t.style[e])?er:~e.indexOf("-")?nr:_n(t,e)},core:{_removeProperty:Cr,_getMatrix:Mr}};On.utils.checkPrefix=Dr,Vr=Pt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Wr="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Ln[t]=1})),Pt(Wr,(function(t){W.units[t]="deg",Br[t]=1})),Jn[Vr[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Wr,Pt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Jn[e[1]]=Vr[e[0]]})),Pt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){W.units[t]="px"})),On.registerPlugin(Xr);var Jr=On.registerPlugin(Xr)||On,$r=(Jr.core.Tween,/(^\s+|\s+$)/g),Hr=/([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;function Qr(t,e,n,r){for(var i,s=t.firstChild,u=[];s;)3===s.nodeType?(i=(s.nodeValue+"").replace(/^\n+/g,""),r||(i=i.replace(/\s+/g," ")),u.push.apply(u,Zr(i,e,n,r))):"br"===(s.nodeName+"").toLowerCase()?u[u.length-1]+="<br>":u.push(s.outerHTML),s=s.nextSibling;return u}function Zr(t,e,n,r){if(t+="",n&&(t=t.replace($r,"")),e&&""!==e)return t.replace(/>/g,"&gt;").replace(/</g,"&lt;").split(e);for(var i,s,u=[],o=t.length,a=0;a<o;a++)((s=t.charAt(a)).charCodeAt(0)>=55296&&s.charCodeAt(0)<=56319||t.charCodeAt(a+1)>=65024&&t.charCodeAt(a+1)<=65039)&&(i=((t.substr(a,12).split(Hr)||[])[1]||"").length||2,s=t.substr(a,i),u.emoji=1,a+=i-1),u.push(">"===s?"&gt;":"<"===s?"&lt;":!r||" "!==s||" "!==t.charAt(a-1)&&" "!==t.charAt(a+1)?s:"&nbsp;");return u}var Kr,ti,ei={version:"3.8.0",name:"text",init:function(t,e,n){var r,i,s,u,o,a,l,A,c=t.nodeName.toUpperCase(),D=this;if(D.svg=t.getBBox&&("TEXT"===c||"TSPAN"===c),!("innerHTML"in t)&&!D.svg)return!1;if(D.target=t,"object"!=typeof e&&(e={value:e}),"value"in e){for(D.delimiter=e.delimiter||"",s=Qr(t,D.delimiter,!1,e.preserveSpaces),ti||(ti=document.createElement("div")),ti.innerHTML=e.value,i=Qr(ti,D.delimiter),D.from=n._from,D.from&&(c=s,s=i,i=c),D.hasClass=!(!e.newClass&&!e.oldClass),D.newClass=e.newClass,D.oldClass=e.oldClass,r=(c=s.length-i.length)<0?s:i,D.fillChar=e.fillChar||(e.padSpace?"&nbsp;":""),c<0&&(c=-c);--c>-1;)r.push(D.fillChar);if("diff"===e.type){for(u=0,o=[],a=[],l="",c=0;c<i.length;c++)(A=i[c])===s[c]?l+=A:(o[u]=l+A,a[u++]=l+s[c],l="");i=o,s=a,l&&(i.push(l),s.push(l))}e.speed&&n.duration(Math.min(.05/e.speed*r.length,e.maxDuration||9999)),this.original=s,this.text=i,this._props.push("text")}else D.text=D.original=[""]},render:function(t,e){t>1?t=1:t<0&&(t=0),e.from&&(t=1-t);var n,r,i,s=e.text,u=e.hasClass,o=e.newClass,a=e.oldClass,l=e.delimiter,A=e.target,c=e.fillChar,D=e.original,h=s.length,d=t*h+.5|0;u?(r=a&&d!==h,i=((n=o&&d)?"<span class='"+o+"'>":"")+s.slice(0,d).join(l)+(n?"</span>":"")+(r?"<span class='"+a+"'>":"")+l+D.slice(d).join(l)+(r?"</span>":"")):i=s.slice(0,d).join(l)+l+D.slice(d).join(l),e.svg?A.textContent=i:A.innerHTML="&nbsp;"===c&&~i.indexOf("  ")?i.split("  ").join("&nbsp;&nbsp;"):i}};ei.splitInnerHTML=Qr,ei.emojiSafeSplit=Zr,ei.getText=function t(e){var n=e.nodeType,r="";if(1===n||9===n||11===n){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=t(e)}else if(3===n||4===n)return e.nodeValue;return r},(Kr||"undefined"!=typeof window&&(Kr=window.gsap)&&Kr.registerPlugin&&Kr)&&Kr.registerPlugin(ei);let ni=[0,1,2,3,4,5,6,7,8];const ri={row1:()=>[0,1,2].map((t=>ni[t])),row2:()=>[3,4,5].map((t=>ni[t])),row3:()=>[6,7,8].map((t=>ni[t])),column1:()=>[0,3,6].map((t=>ni[t])),column2:()=>[1,4,7].map((t=>ni[t])),column3:()=>[2,5,8].map((t=>ni[t])),diagonal1:()=>[0,4,8].map((t=>ni[t])),diagonal2:()=>[2,4,6].map((t=>ni[t]))},ii=()=>ni;function si(t){return t.filter((t=>"o"!==t&&"x"!==t))}function ui(t,e){ni.splice(t,1,e)}const oi=()=>{ni=[0,1,2,3,4,5,6,7,8],document.querySelectorAll(".board-space").forEach((t=>{t.textContent=""}))};let ai,li,Ai,ci=0,Di="new on the job";function hi(t){return 1===t.getNumber()?(li=t,console.log(li.getName()),li):2===t.getNumber()?(Ai=t,console.log(Ai),Ai):void 0}const di=(t,e)=>{const n=document.querySelector(t);function r(){n.textContent=e,e-=1,console.log(e),0===e?(clearInterval(i),console.log("interval cleared"),alert("time's up!")):5!==li.getScore()&&5!==Ai.getScore()||(clearInterval(i),console.log("interval cleared"))}ai=e,r();let i=setInterval(r,1e3)},pi=()=>ci,fi=()=>{ci+=1},mi=()=>{ci=0},Ci=()=>vi(ii(),Ai.getMarker()).index,gi=()=>si(ii())[Math.floor(Math.random()*si(ii()).length)];function _i(t){return Object.values(ri).some((e=>e().join(",")===`${t},${t},${t}`))}function vi(t,e){const n=si(t);if(_i(li.getMarker()))return{score:-1};if(_i(Ai.getMarker()))return{score:1};if(0===n.length)return{score:0};const r=[];for(let i=0;i<n.length;i++){const s=[];if(s.index=t[n[i]],t[n[i]]=e,e===Ai.getMarker()){const e=vi(t,li.getMarker());s.score=e.score}else{const e=vi(t,Ai.getMarker());s.score=e.score}t[n[i]]=s.index,r.push(s)}let i;if(e===Ai.getMarker()){let t=-1/0;for(let e=0;e<r.length;e++)r[e].score>t&&(t=r[e].score,i=e)}else{let t=1/0;for(let e=0;e<r.length;e++)r[e].score<t&&(t=r[e].score,i=e)}return r[i]}const yi={getNumber(){return this.number},getName(){return this.name},resetScore(){this.score=0},getScore(){return this.score},getMarker(){return this.marker},roundWinCheck(){return _i(this.marker)?(console.log(`${this.name} wins`),this.score+=1,console.log(`${this.name} score: ${this.score}`),!0):9===pi()&&"tie"},matchWinCheck(){return 0!==pi()&&5===this.score},computerTurn(){const t=(()=>{if(console.log(Di),"unstoppable"===Di)return Ci();if("unstoppable"!==Di){const t=100*Math.random();if("highly skilled"===Di)return t<75?Ci():gi();if("in training"===Di)return t<50?Ci():gi();if("new on the job"===Di)return t<25?Ci():gi()}})();document.querySelector(`#sector-${t}`).textContent=this.marker,ui(t,this.marker),fi()},playTurn:function(t,e){t.textContent=this.marker,ui(e,this.marker),fi()}};function bi(t,e,n){const r=Object.create(yi);return r.name=e,r.number=t,r.marker=n,r.score=0,r}Jr.registerPlugin(ei);const Fi=document.querySelector("#gameboard-container"),wi=document.querySelector("#enter-btn"),xi=document.querySelector("#start-btn"),Ei=document.querySelector("#player-select-form"),Bi=document.querySelectorAll(".switch-radio"),ki=document.querySelector("#player-two-icon"),Ti=document.querySelector("#player-one-name"),Mi=document.querySelector("#player-two-name");let Si,Oi,Ii;const zi=document.querySelector("#restart-btn"),Pi=document.querySelector("#time-mode-btn"),Ri=document.querySelector("#mode-selector");Ri.style.visibility="hidden";const Ui=document.querySelector("#timer"),ji=document.querySelector(".selector-label"),qi=document.querySelector("#difficulty-selector"),Li=document.querySelector("#player-one-score"),Gi=document.querySelector("#player-two-score"),Yi=document.querySelector("#game-container"),Ni=(document.querySelector(".seconds"),()=>{zi.style.visibility="visible",5===Oi.getScore()||5===Ii.getScore()?zi.textContent="New Game":zi.textContent="Next Round"}),Wi=t=>{const e=document.createElement("h2");e.classList.add("g-h2"),e.setAttribute("id","result-announce"),e.textContent=t,Yi.appendChild(e),Jr.timeline().to("#result-announce",{duration:.75,scale:7,ease:"back.out"}).to("#result-announce",{duration:.75,opacity:0,onComplete(){Yi.removeChild(e)}})};function Vi(t,e){const n=t.roundWinCheck(),r=t.matchWinCheck();console.log(r),!1!==n&&!0!==r&&(!0===n&&(Xi(e),Wi(`${t.getName()} wins!`),Ni()),"tie"===n&&(Wi("It's a tie!"),Ni())),!0===r&&(Xi(e),Wi(`${t.getName()} wins the match!`),Ni())}function Xi(t){const e=document.createElement("div");e.classList.add("player-point"),t.appendChild(e)}function Ji(t){return[...document.getElementsByClassName(t)].filter((t=>t.checked))[0].value}const $i=new MutationObserver((t=>{console.log(t)}));Pi.addEventListener("click",(()=>{"hidden"===Ri.style.visibility?(console.log(Ri),Ri.style.visibility="visible",console.log(Ri)):(console.log("err!"),Ri.style.visibility="hidden")})),[0,1,2,3,4,5,6,7,8].forEach((t=>{const e=document.createElement("div");e.classList.add("board-space"),e.setAttribute("id",`sector-${t}`),Fi.appendChild(e),e.addEventListener("click",(()=>{"x"!==e.textContent&&"o"!==e.textContent&&!0!==Oi.roundWinCheck()&&!0!==Ii.roundWinCheck()?pi()%2==0&&"computer"===Ii.getName()?(Oi.playTurn(e,t),Vi(Oi,Li),!0!==_i(Oi.getMarker())&&(Ii.computerTurn(),Vi(Ii,Gi))):pi()%2==0?(Oi.playTurn(e,t),Vi(Oi,Li)):(Ii.playTurn(e,t),Vi(Ii,Gi)):(_i(Oi.getMarker())||_i(Ii.getMarker()))&&console.log("round over")}))})),function(){const t=t=>{t.style.visibility="visible"};wi.addEventListener("click",(()=>{Jr.timeline().to("#enter-btn",{duration:1,xPercent:-150},0).to("#intro-screen",{duration:.8,xPercent:-150},.3).to("#player-select-form",{duration:1,xPercent:-150.2,yPercent:0},1).to("#intro-container",{autoAlpha:0,delay:3})})),Jr.timeline().to("#intro-title",{duration:1.5,rotate:720,perspective:500,scale:50,ease:"back.out"}).from("#enter-btn",{duration:1,x:1e3});Bi.forEach((t=>{t.addEventListener("change",(()=>(()=>{const t=[...Bi].filter((t=>t.checked));if("player"===t[0].value)qi.style.visibility="hidden",ji.style.visibility="hidden",ki.src="/src/public/player-two-icon.png",Mi.value="",Mi.disabled=!1;else if("computer"===t[0].value){ki.src="/src/public/ai-icon.png",Mi.value="computer",Mi.disabled=!0,qi.textContent="new on the job",qi.style.visibility="visible",ji.style.visibility="visible";let t=0;qi.addEventListener("click",(()=>{const e=["new on the job","in training","highly skilled","unstoppable"];t<3?(t+=1,Si=e[t],qi.textContent=Si):(t=0,Si=e[t],qi.textContent=Si),Di=Si,console.log(Di)}))}})())),console.log(t)})),zi.addEventListener("click",(()=>{5===Oi.getScore()||5===Ii.getScore()?(function(){for(;Li.firstChild;)Li.removeChild(Li.lastChild);for(;Gi.firstChild;)Gi.removeChild(Gi.lastChild)}(),oi(),Oi.resetScore(),Ii.resetScore(),mi(),zi.style.visibility="hidden",di(".seconds",ai)):(oi(),mi(),zi.style.visibility="hidden")})),Ei.addEventListener("submit",(t=>{t.preventDefault(),Oi=bi(1,Ti.value,Ji("player-one-radio")),console.log(Oi),Ii=bi(2,Mi.value,Ji("player-two-radio")),hi(Oi),hi(Ii)})),xi.addEventListener("click",(()=>{const e=Ji("time-radio");console.log(e);const n=Ji("extreme-radio");function r(){const t=new Audio("/src/public/lightwave-game-theme.mp3");"boolean"==typeof t.loop?(t.loop=!0,t.play()):t.addEventListener("ended",(function(){this.currentTime=0,this.play()}),!1)}console.log(n),console.log(`${e} on click`),$i.observe(Ui.children[0],{characterData:!1,attributes:!1,childList:!0,subtree:!1});const i=Jr.timeline(),s=Jr.timeline(),u=Jr.timeline(),o=Jr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power4"}}),a=Jr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power1.out"}}),l=Jr.timeline({repeat:-1,repeatDelay:0,defaults:{ease:"power1.out"}}),A=60/130;var c;Ui.addEventListener("update",(()=>{1===Ui.textContent&&Ni()})),"endless"===(c=e)?s.to("#gameboard-container",{duration:0,delay:3,autoAlpha:1}).call(r,null,3+A/4):"endless"!==c&&(console.log("timer initialized"),s.to("#gameboard-container",{duration:0,delay:3,autoAlpha:1}).call(r,null,3+A/4).call(di,[".seconds",c],null,3+A/4).call(t,[Ui],null,3+A/4)),i.to("#player-select-form",{duration:1,xPercent:-300}).to("#player-select-form",{autoAlpha:0}),u.to("#game-container",{duration:1,xPercent:-300,yPercent:-35}).to(".countdown-timer",{duration:2,text:{value:"3 2 1 Begin",delimiter:" "}}).to(".countdown-timer",{duration:0,autoAlpha:0}),o.to(".board-space",{background:"hsla(82, 100%, 55%, .85)"},.61538).to(".board-space",{background:"hsla(43, 100%, 53%, .85)"}).to(".board-space",{background:"hsla(30, 100%, 54%, .85)"}).to(".board-space",{background:"hsla(20, 100%, 55%, .85)"}).to(".board-space",{background:"hsla(13, 100%, 55%, .85)"}).totalDuration(8*A),a.to("#gameboard-container",{scale:1.1}).totalDuration(A),l.to("#gameboard-container",{rotation:90,boxShadow:"hsla(82, 100%, 55%, .85) -10px 5px"},2).to("#gameboard-container",{rotation:180,boxShadow:"hsla(43, 100%, 53%, .85) -10px 5px"},4).to("#gameboard-container",{rotation:270,boxShadow:"hsla(30, 100%, 54%, .85) 10px 5px"},6).to("#gameboard-container",{rotation:360,boxShadow:"hsla(13, 100%, 55%, .85) 10px 5px"},8).totalDuration(16*A)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,